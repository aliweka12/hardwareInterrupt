
Hardware_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f4  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080029a8  080029a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000003c  080029b8  080029b8  000129b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000e8  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002adc  08002adc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002adc  08002adc  00012adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ae0  08002ae0  00012ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08002ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0000015c  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   000064a6  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001638  00000000  00000000  00026595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006c8  00000000  00000000  00027bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004f4  00000000  00000000  00028298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ad4a  00000000  00000000  0002878c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007a1b  00000000  00000000  000534d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f210b  00000000  00000000  0005aef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000205c  00000000  00000000  0014cffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0014f058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	2000007c 	.word	0x2000007c
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08002990 	.word	0x08002990

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000080 	.word	0x20000080
 80001f0:	08002990 	.word	0x08002990

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f001 b8de 	b.w	80013c8 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9e08      	ldr	r6, [sp, #32]
 800022a:	460d      	mov	r5, r1
 800022c:	4604      	mov	r4, r0
 800022e:	460f      	mov	r7, r1
 8000230:	2b00      	cmp	r3, #0
 8000232:	d14a      	bne.n	80002ca <__udivmoddi4+0xa6>
 8000234:	428a      	cmp	r2, r1
 8000236:	4694      	mov	ip, r2
 8000238:	d965      	bls.n	8000306 <__udivmoddi4+0xe2>
 800023a:	fab2 f382 	clz	r3, r2
 800023e:	b143      	cbz	r3, 8000252 <__udivmoddi4+0x2e>
 8000240:	fa02 fc03 	lsl.w	ip, r2, r3
 8000244:	f1c3 0220 	rsb	r2, r3, #32
 8000248:	409f      	lsls	r7, r3
 800024a:	fa20 f202 	lsr.w	r2, r0, r2
 800024e:	4317      	orrs	r7, r2
 8000250:	409c      	lsls	r4, r3
 8000252:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000256:	fa1f f58c 	uxth.w	r5, ip
 800025a:	fbb7 f1fe 	udiv	r1, r7, lr
 800025e:	0c22      	lsrs	r2, r4, #16
 8000260:	fb0e 7711 	mls	r7, lr, r1, r7
 8000264:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000268:	fb01 f005 	mul.w	r0, r1, r5
 800026c:	4290      	cmp	r0, r2
 800026e:	d90a      	bls.n	8000286 <__udivmoddi4+0x62>
 8000270:	eb1c 0202 	adds.w	r2, ip, r2
 8000274:	f101 37ff 	add.w	r7, r1, #4294967295
 8000278:	f080 811c 	bcs.w	80004b4 <__udivmoddi4+0x290>
 800027c:	4290      	cmp	r0, r2
 800027e:	f240 8119 	bls.w	80004b4 <__udivmoddi4+0x290>
 8000282:	3902      	subs	r1, #2
 8000284:	4462      	add	r2, ip
 8000286:	1a12      	subs	r2, r2, r0
 8000288:	b2a4      	uxth	r4, r4
 800028a:	fbb2 f0fe 	udiv	r0, r2, lr
 800028e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000292:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000296:	fb00 f505 	mul.w	r5, r0, r5
 800029a:	42a5      	cmp	r5, r4
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x90>
 800029e:	eb1c 0404 	adds.w	r4, ip, r4
 80002a2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a6:	f080 8107 	bcs.w	80004b8 <__udivmoddi4+0x294>
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	f240 8104 	bls.w	80004b8 <__udivmoddi4+0x294>
 80002b0:	4464      	add	r4, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b8:	1b64      	subs	r4, r4, r5
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11e      	cbz	r6, 80002c6 <__udivmoddi4+0xa2>
 80002be:	40dc      	lsrs	r4, r3
 80002c0:	2300      	movs	r3, #0
 80002c2:	e9c6 4300 	strd	r4, r3, [r6]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d908      	bls.n	80002e0 <__udivmoddi4+0xbc>
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	f000 80ed 	beq.w	80004ae <__udivmoddi4+0x28a>
 80002d4:	2100      	movs	r1, #0
 80002d6:	e9c6 0500 	strd	r0, r5, [r6]
 80002da:	4608      	mov	r0, r1
 80002dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e0:	fab3 f183 	clz	r1, r3
 80002e4:	2900      	cmp	r1, #0
 80002e6:	d149      	bne.n	800037c <__udivmoddi4+0x158>
 80002e8:	42ab      	cmp	r3, r5
 80002ea:	d302      	bcc.n	80002f2 <__udivmoddi4+0xce>
 80002ec:	4282      	cmp	r2, r0
 80002ee:	f200 80f8 	bhi.w	80004e2 <__udivmoddi4+0x2be>
 80002f2:	1a84      	subs	r4, r0, r2
 80002f4:	eb65 0203 	sbc.w	r2, r5, r3
 80002f8:	2001      	movs	r0, #1
 80002fa:	4617      	mov	r7, r2
 80002fc:	2e00      	cmp	r6, #0
 80002fe:	d0e2      	beq.n	80002c6 <__udivmoddi4+0xa2>
 8000300:	e9c6 4700 	strd	r4, r7, [r6]
 8000304:	e7df      	b.n	80002c6 <__udivmoddi4+0xa2>
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xe6>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f382 	clz	r3, r2
 800030e:	2b00      	cmp	r3, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x210>
 8000314:	1a8a      	subs	r2, r1, r2
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2101      	movs	r1, #1
 8000320:	fbb2 f5f7 	udiv	r5, r2, r7
 8000324:	fb07 2015 	mls	r0, r7, r5, r2
 8000328:	0c22      	lsrs	r2, r4, #16
 800032a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032e:	fb0e f005 	mul.w	r0, lr, r5
 8000332:	4290      	cmp	r0, r2
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x124>
 8000336:	eb1c 0202 	adds.w	r2, ip, r2
 800033a:	f105 38ff 	add.w	r8, r5, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x122>
 8000340:	4290      	cmp	r0, r2
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2b8>
 8000346:	4645      	mov	r5, r8
 8000348:	1a12      	subs	r2, r2, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000350:	fb07 2210 	mls	r2, r7, r0, r2
 8000354:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x14e>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x14c>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2c2>
 8000370:	4610      	mov	r0, r2
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800037a:	e79f      	b.n	80002bc <__udivmoddi4+0x98>
 800037c:	f1c1 0720 	rsb	r7, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa05 f401 	lsl.w	r4, r5, r1
 800038e:	fa20 f307 	lsr.w	r3, r0, r7
 8000392:	40fd      	lsrs	r5, r7
 8000394:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000398:	4323      	orrs	r3, r4
 800039a:	fbb5 f8f9 	udiv	r8, r5, r9
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	fb09 5518 	mls	r5, r9, r8, r5
 80003a6:	0c1c      	lsrs	r4, r3, #16
 80003a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003ac:	fb08 f50e 	mul.w	r5, r8, lr
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b0>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2b4>
 80003c8:	42a5      	cmp	r5, r4
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2b4>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4464      	add	r4, ip
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	b29d      	uxth	r5, r3
 80003d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003dc:	fb09 4413 	mls	r4, r9, r3, r4
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1da>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2ac>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2ac>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	4464      	add	r4, ip
 80003fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000402:	fba3 9502 	umull	r9, r5, r3, r2
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	42ac      	cmp	r4, r5
 800040c:	46c8      	mov	r8, r9
 800040e:	46ae      	mov	lr, r5
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x29c>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x298>
 8000414:	b156      	cbz	r6, 800042c <__udivmoddi4+0x208>
 8000416:	ebb0 0208 	subs.w	r2, r0, r8
 800041a:	eb64 040e 	sbc.w	r4, r4, lr
 800041e:	fa04 f707 	lsl.w	r7, r4, r7
 8000422:	40ca      	lsrs	r2, r1
 8000424:	40cc      	lsrs	r4, r1
 8000426:	4317      	orrs	r7, r2
 8000428:	e9c6 7400 	strd	r7, r4, [r6]
 800042c:	4618      	mov	r0, r3
 800042e:	2100      	movs	r1, #0
 8000430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000434:	f1c3 0120 	rsb	r1, r3, #32
 8000438:	fa02 fc03 	lsl.w	ip, r2, r3
 800043c:	fa20 f201 	lsr.w	r2, r0, r1
 8000440:	fa25 f101 	lsr.w	r1, r5, r1
 8000444:	409d      	lsls	r5, r3
 8000446:	432a      	orrs	r2, r5
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1510 	mls	r5, r7, r0, r1
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045e:	fb00 f50e 	mul.w	r5, r0, lr
 8000462:	428d      	cmp	r5, r1
 8000464:	fa04 f403 	lsl.w	r4, r4, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x258>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b0>
 8000474:	428d      	cmp	r5, r1
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b0>
 8000478:	3802      	subs	r0, #2
 800047a:	4461      	add	r1, ip
 800047c:	1b49      	subs	r1, r1, r5
 800047e:	b292      	uxth	r2, r2
 8000480:	fbb1 f5f7 	udiv	r5, r1, r7
 8000484:	fb07 1115 	mls	r1, r7, r5, r1
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	fb05 f10e 	mul.w	r1, r5, lr
 8000490:	4291      	cmp	r1, r2
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x282>
 8000494:	eb1c 0202 	adds.w	r2, ip, r2
 8000498:	f105 38ff 	add.w	r8, r5, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2a8>
 800049e:	4291      	cmp	r1, r2
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2a8>
 80004a2:	3d02      	subs	r5, #2
 80004a4:	4462      	add	r2, ip
 80004a6:	1a52      	subs	r2, r2, r1
 80004a8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0xfc>
 80004ae:	4631      	mov	r1, r6
 80004b0:	4630      	mov	r0, r6
 80004b2:	e708      	b.n	80002c6 <__udivmoddi4+0xa2>
 80004b4:	4639      	mov	r1, r7
 80004b6:	e6e6      	b.n	8000286 <__udivmoddi4+0x62>
 80004b8:	4610      	mov	r0, r2
 80004ba:	e6fb      	b.n	80002b4 <__udivmoddi4+0x90>
 80004bc:	4548      	cmp	r0, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f0>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c8:	3b01      	subs	r3, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f0>
 80004cc:	4645      	mov	r5, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x282>
 80004d0:	462b      	mov	r3, r5
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1da>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x258>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b0>
 80004dc:	3d02      	subs	r5, #2
 80004de:	4462      	add	r2, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x124>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e70a      	b.n	80002fc <__udivmoddi4+0xd8>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x14e>

080004ec <selfrel_offset31>:
 80004ec:	6803      	ldr	r3, [r0, #0]
 80004ee:	005a      	lsls	r2, r3, #1
 80004f0:	bf4c      	ite	mi
 80004f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80004f6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80004fa:	4418      	add	r0, r3
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <search_EIT_table>:
 8000500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000504:	b329      	cbz	r1, 8000552 <search_EIT_table+0x52>
 8000506:	1e4f      	subs	r7, r1, #1
 8000508:	4604      	mov	r4, r0
 800050a:	4615      	mov	r5, r2
 800050c:	463e      	mov	r6, r7
 800050e:	f04f 0800 	mov.w	r8, #0
 8000512:	eb08 0106 	add.w	r1, r8, r6
 8000516:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800051a:	1049      	asrs	r1, r1, #1
 800051c:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000520:	4648      	mov	r0, r9
 8000522:	f7ff ffe3 	bl	80004ec <selfrel_offset31>
 8000526:	4603      	mov	r3, r0
 8000528:	00c8      	lsls	r0, r1, #3
 800052a:	3008      	adds	r0, #8
 800052c:	428f      	cmp	r7, r1
 800052e:	4420      	add	r0, r4
 8000530:	d009      	beq.n	8000546 <search_EIT_table+0x46>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d809      	bhi.n	800054a <search_EIT_table+0x4a>
 8000536:	f7ff ffd9 	bl	80004ec <selfrel_offset31>
 800053a:	3801      	subs	r0, #1
 800053c:	42a8      	cmp	r0, r5
 800053e:	d20a      	bcs.n	8000556 <search_EIT_table+0x56>
 8000540:	f101 0801 	add.w	r8, r1, #1
 8000544:	e7e5      	b.n	8000512 <search_EIT_table+0x12>
 8000546:	42ab      	cmp	r3, r5
 8000548:	d905      	bls.n	8000556 <search_EIT_table+0x56>
 800054a:	4588      	cmp	r8, r1
 800054c:	d001      	beq.n	8000552 <search_EIT_table+0x52>
 800054e:	1e4e      	subs	r6, r1, #1
 8000550:	e7df      	b.n	8000512 <search_EIT_table+0x12>
 8000552:	f04f 0900 	mov.w	r9, #0
 8000556:	4648      	mov	r0, r9
 8000558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800055c <__gnu_unwind_get_pr_addr>:
 800055c:	2801      	cmp	r0, #1
 800055e:	d007      	beq.n	8000570 <__gnu_unwind_get_pr_addr+0x14>
 8000560:	2802      	cmp	r0, #2
 8000562:	d007      	beq.n	8000574 <__gnu_unwind_get_pr_addr+0x18>
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <__gnu_unwind_get_pr_addr+0x1c>)
 8000566:	2800      	cmp	r0, #0
 8000568:	bf0c      	ite	eq
 800056a:	4618      	moveq	r0, r3
 800056c:	2000      	movne	r0, #0
 800056e:	4770      	bx	lr
 8000570:	4802      	ldr	r0, [pc, #8]	; (800057c <__gnu_unwind_get_pr_addr+0x20>)
 8000572:	4770      	bx	lr
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <__gnu_unwind_get_pr_addr+0x24>)
 8000576:	4770      	bx	lr
 8000578:	08000c31 	.word	0x08000c31
 800057c:	08000c35 	.word	0x08000c35
 8000580:	08000c39 	.word	0x08000c39

08000584 <get_eit_entry>:
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	4b22      	ldr	r3, [pc, #136]	; (8000610 <get_eit_entry+0x8c>)
 8000588:	b083      	sub	sp, #12
 800058a:	4604      	mov	r4, r0
 800058c:	1e8d      	subs	r5, r1, #2
 800058e:	b343      	cbz	r3, 80005e2 <get_eit_entry+0x5e>
 8000590:	a901      	add	r1, sp, #4
 8000592:	4628      	mov	r0, r5
 8000594:	f3af 8000 	nop.w
 8000598:	b1f0      	cbz	r0, 80005d8 <get_eit_entry+0x54>
 800059a:	9901      	ldr	r1, [sp, #4]
 800059c:	462a      	mov	r2, r5
 800059e:	f7ff ffaf 	bl	8000500 <search_EIT_table>
 80005a2:	4601      	mov	r1, r0
 80005a4:	b1c0      	cbz	r0, 80005d8 <get_eit_entry+0x54>
 80005a6:	f7ff ffa1 	bl	80004ec <selfrel_offset31>
 80005aa:	684b      	ldr	r3, [r1, #4]
 80005ac:	64a0      	str	r0, [r4, #72]	; 0x48
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d02b      	beq.n	800060a <get_eit_entry+0x86>
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	f101 0004 	add.w	r0, r1, #4
 80005b8:	db25      	blt.n	8000606 <get_eit_entry+0x82>
 80005ba:	f7ff ff97 	bl	80004ec <selfrel_offset31>
 80005be:	2300      	movs	r3, #0
 80005c0:	6523      	str	r3, [r4, #80]	; 0x50
 80005c2:	6803      	ldr	r3, [r0, #0]
 80005c4:	64e0      	str	r0, [r4, #76]	; 0x4c
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db12      	blt.n	80005f0 <get_eit_entry+0x6c>
 80005ca:	f7ff ff8f 	bl	80004ec <selfrel_offset31>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2000      	movs	r0, #0
 80005d2:	6123      	str	r3, [r4, #16]
 80005d4:	b003      	add	sp, #12
 80005d6:	bd30      	pop	{r4, r5, pc}
 80005d8:	2300      	movs	r3, #0
 80005da:	2009      	movs	r0, #9
 80005dc:	6123      	str	r3, [r4, #16]
 80005de:	b003      	add	sp, #12
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <get_eit_entry+0x90>)
 80005e4:	490c      	ldr	r1, [pc, #48]	; (8000618 <get_eit_entry+0x94>)
 80005e6:	1ac9      	subs	r1, r1, r3
 80005e8:	10c9      	asrs	r1, r1, #3
 80005ea:	4618      	mov	r0, r3
 80005ec:	9101      	str	r1, [sp, #4]
 80005ee:	e7d5      	b.n	800059c <get_eit_entry+0x18>
 80005f0:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80005f4:	f7ff ffb2 	bl	800055c <__gnu_unwind_get_pr_addr>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	bf0c      	ite	eq
 80005fc:	2009      	moveq	r0, #9
 80005fe:	2000      	movne	r0, #0
 8000600:	6123      	str	r3, [r4, #16]
 8000602:	b003      	add	sp, #12
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	2301      	movs	r3, #1
 8000608:	e7da      	b.n	80005c0 <get_eit_entry+0x3c>
 800060a:	2300      	movs	r3, #0
 800060c:	2005      	movs	r0, #5
 800060e:	e7e0      	b.n	80005d2 <get_eit_entry+0x4e>
 8000610:	00000000 	.word	0x00000000
 8000614:	080029f4 	.word	0x080029f4
 8000618:	08002adc 	.word	0x08002adc

0800061c <restore_non_core_regs>:
 800061c:	6803      	ldr	r3, [r0, #0]
 800061e:	07da      	lsls	r2, r3, #31
 8000620:	b510      	push	{r4, lr}
 8000622:	4604      	mov	r4, r0
 8000624:	d406      	bmi.n	8000634 <restore_non_core_regs+0x18>
 8000626:	079b      	lsls	r3, r3, #30
 8000628:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800062c:	d509      	bpl.n	8000642 <restore_non_core_regs+0x26>
 800062e:	f000 fc71 	bl	8000f14 <__gnu_Unwind_Restore_VFP_D>
 8000632:	6823      	ldr	r3, [r4, #0]
 8000634:	0759      	lsls	r1, r3, #29
 8000636:	d509      	bpl.n	800064c <restore_non_core_regs+0x30>
 8000638:	071a      	lsls	r2, r3, #28
 800063a:	d50e      	bpl.n	800065a <restore_non_core_regs+0x3e>
 800063c:	06db      	lsls	r3, r3, #27
 800063e:	d513      	bpl.n	8000668 <restore_non_core_regs+0x4c>
 8000640:	bd10      	pop	{r4, pc}
 8000642:	f000 fc5f 	bl	8000f04 <__gnu_Unwind_Restore_VFP>
 8000646:	6823      	ldr	r3, [r4, #0]
 8000648:	0759      	lsls	r1, r3, #29
 800064a:	d4f5      	bmi.n	8000638 <restore_non_core_regs+0x1c>
 800064c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000650:	f000 fc68 	bl	8000f24 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000654:	6823      	ldr	r3, [r4, #0]
 8000656:	071a      	lsls	r2, r3, #28
 8000658:	d4f0      	bmi.n	800063c <restore_non_core_regs+0x20>
 800065a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800065e:	f000 fc69 	bl	8000f34 <__gnu_Unwind_Restore_WMMXD>
 8000662:	6823      	ldr	r3, [r4, #0]
 8000664:	06db      	lsls	r3, r3, #27
 8000666:	d4eb      	bmi.n	8000640 <restore_non_core_regs+0x24>
 8000668:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800066c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000670:	f000 bca4 	b.w	8000fbc <__gnu_Unwind_Restore_WMMXC>

08000674 <__gnu_unwind_24bit.constprop.0>:
 8000674:	2009      	movs	r0, #9
 8000676:	4770      	bx	lr

08000678 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8000678:	4603      	mov	r3, r0
 800067a:	6800      	ldr	r0, [r0, #0]
 800067c:	b100      	cbz	r0, 8000680 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 800067e:	4418      	add	r0, r3
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <_Unwind_DebugHook>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <unwind_phase2>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	4604      	mov	r4, r0
 800068c:	460e      	mov	r6, r1
 800068e:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000690:	4620      	mov	r0, r4
 8000692:	f7ff ff77 	bl	8000584 <get_eit_entry>
 8000696:	4605      	mov	r5, r0
 8000698:	b988      	cbnz	r0, 80006be <unwind_phase2+0x36>
 800069a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800069c:	6162      	str	r2, [r4, #20]
 800069e:	6923      	ldr	r3, [r4, #16]
 80006a0:	4632      	mov	r2, r6
 80006a2:	4621      	mov	r1, r4
 80006a4:	2001      	movs	r0, #1
 80006a6:	4798      	blx	r3
 80006a8:	2808      	cmp	r0, #8
 80006aa:	d0f0      	beq.n	800068e <unwind_phase2+0x6>
 80006ac:	2807      	cmp	r0, #7
 80006ae:	d106      	bne.n	80006be <unwind_phase2+0x36>
 80006b0:	4628      	mov	r0, r5
 80006b2:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80006b4:	f7ff ffe6 	bl	8000684 <_Unwind_DebugHook>
 80006b8:	1d30      	adds	r0, r6, #4
 80006ba:	f000 fc17 	bl	8000eec <__restore_core_regs>
 80006be:	f002 f90d 	bl	80028dc <abort>
 80006c2:	bf00      	nop

080006c4 <unwind_phase2_forced>:
 80006c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006c8:	1d0d      	adds	r5, r1, #4
 80006ca:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80006ce:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80006d2:	4607      	mov	r7, r0
 80006d4:	4614      	mov	r4, r2
 80006d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d8:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80006dc:	f10d 0c0c 	add.w	ip, sp, #12
 80006e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006f4:	ae02      	add	r6, sp, #8
 80006f6:	f04f 0e00 	mov.w	lr, #0
 80006fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80006fe:	f8c6 e000 	str.w	lr, [r6]
 8000702:	e020      	b.n	8000746 <unwind_phase2_forced+0x82>
 8000704:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800070c:	4631      	mov	r1, r6
 800070e:	a87a      	add	r0, sp, #488	; 0x1e8
 8000710:	f002 f930 	bl	8002974 <memcpy>
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000718:	4639      	mov	r1, r7
 800071a:	4650      	mov	r0, sl
 800071c:	4798      	blx	r3
 800071e:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000720:	6473      	str	r3, [r6, #68]	; 0x44
 8000722:	4621      	mov	r1, r4
 8000724:	e9cd 6900 	strd	r6, r9, [sp]
 8000728:	4605      	mov	r5, r0
 800072a:	463b      	mov	r3, r7
 800072c:	463a      	mov	r2, r7
 800072e:	2001      	movs	r0, #1
 8000730:	47c0      	blx	r8
 8000732:	4604      	mov	r4, r0
 8000734:	b9e0      	cbnz	r0, 8000770 <unwind_phase2_forced+0xac>
 8000736:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800073a:	a97a      	add	r1, sp, #488	; 0x1e8
 800073c:	4630      	mov	r0, r6
 800073e:	f002 f919 	bl	8002974 <memcpy>
 8000742:	2d08      	cmp	r5, #8
 8000744:	d11a      	bne.n	800077c <unwind_phase2_forced+0xb8>
 8000746:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000748:	4638      	mov	r0, r7
 800074a:	f7ff ff1b 	bl	8000584 <get_eit_entry>
 800074e:	3409      	adds	r4, #9
 8000750:	fa5f fa84 	uxtb.w	sl, r4
 8000754:	4605      	mov	r5, r0
 8000756:	2800      	cmp	r0, #0
 8000758:	d0d4      	beq.n	8000704 <unwind_phase2_forced+0x40>
 800075a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800075c:	6473      	str	r3, [r6, #68]	; 0x44
 800075e:	463a      	mov	r2, r7
 8000760:	e9cd 6900 	strd	r6, r9, [sp]
 8000764:	463b      	mov	r3, r7
 8000766:	f04a 0110 	orr.w	r1, sl, #16
 800076a:	2001      	movs	r0, #1
 800076c:	47c0      	blx	r8
 800076e:	b100      	cbz	r0, 8000772 <unwind_phase2_forced+0xae>
 8000770:	2509      	movs	r5, #9
 8000772:	4628      	mov	r0, r5
 8000774:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800077c:	2d07      	cmp	r5, #7
 800077e:	d1f7      	bne.n	8000770 <unwind_phase2_forced+0xac>
 8000780:	4620      	mov	r0, r4
 8000782:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000784:	f7ff ff7e 	bl	8000684 <_Unwind_DebugHook>
 8000788:	a803      	add	r0, sp, #12
 800078a:	f000 fbaf 	bl	8000eec <__restore_core_regs>
 800078e:	bf00      	nop

08000790 <_Unwind_GetCFA>:
 8000790:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000792:	4770      	bx	lr

08000794 <__gnu_Unwind_RaiseException>:
 8000794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000796:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000798:	640b      	str	r3, [r1, #64]	; 0x40
 800079a:	f101 0c04 	add.w	ip, r1, #4
 800079e:	460e      	mov	r6, r1
 80007a0:	4605      	mov	r5, r0
 80007a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80007a6:	b0f9      	sub	sp, #484	; 0x1e4
 80007a8:	ac01      	add	r4, sp, #4
 80007aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80007b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80007b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80007bc:	f04f 37ff 	mov.w	r7, #4294967295
 80007c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80007c4:	9700      	str	r7, [sp, #0]
 80007c6:	e006      	b.n	80007d6 <__gnu_Unwind_RaiseException+0x42>
 80007c8:	692b      	ldr	r3, [r5, #16]
 80007ca:	466a      	mov	r2, sp
 80007cc:	4629      	mov	r1, r5
 80007ce:	4798      	blx	r3
 80007d0:	2808      	cmp	r0, #8
 80007d2:	4604      	mov	r4, r0
 80007d4:	d108      	bne.n	80007e8 <__gnu_Unwind_RaiseException+0x54>
 80007d6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80007d8:	4628      	mov	r0, r5
 80007da:	f7ff fed3 	bl	8000584 <get_eit_entry>
 80007de:	2800      	cmp	r0, #0
 80007e0:	d0f2      	beq.n	80007c8 <__gnu_Unwind_RaiseException+0x34>
 80007e2:	2009      	movs	r0, #9
 80007e4:	b079      	add	sp, #484	; 0x1e4
 80007e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e8:	4668      	mov	r0, sp
 80007ea:	f7ff ff17 	bl	800061c <restore_non_core_regs>
 80007ee:	2c06      	cmp	r4, #6
 80007f0:	d1f7      	bne.n	80007e2 <__gnu_Unwind_RaiseException+0x4e>
 80007f2:	4631      	mov	r1, r6
 80007f4:	4628      	mov	r0, r5
 80007f6:	f7ff ff47 	bl	8000688 <unwind_phase2>
 80007fa:	bf00      	nop

080007fc <__gnu_Unwind_ForcedUnwind>:
 80007fc:	60c1      	str	r1, [r0, #12]
 80007fe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000800:	6182      	str	r2, [r0, #24]
 8000802:	6419      	str	r1, [r3, #64]	; 0x40
 8000804:	2200      	movs	r2, #0
 8000806:	4619      	mov	r1, r3
 8000808:	e75c      	b.n	80006c4 <unwind_phase2_forced>
 800080a:	bf00      	nop

0800080c <__gnu_Unwind_Resume>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	68c6      	ldr	r6, [r0, #12]
 8000810:	6943      	ldr	r3, [r0, #20]
 8000812:	640b      	str	r3, [r1, #64]	; 0x40
 8000814:	b9ae      	cbnz	r6, 8000842 <__gnu_Unwind_Resume+0x36>
 8000816:	6903      	ldr	r3, [r0, #16]
 8000818:	460a      	mov	r2, r1
 800081a:	4604      	mov	r4, r0
 800081c:	460d      	mov	r5, r1
 800081e:	4601      	mov	r1, r0
 8000820:	2002      	movs	r0, #2
 8000822:	4798      	blx	r3
 8000824:	2807      	cmp	r0, #7
 8000826:	d005      	beq.n	8000834 <__gnu_Unwind_Resume+0x28>
 8000828:	2808      	cmp	r0, #8
 800082a:	d10f      	bne.n	800084c <__gnu_Unwind_Resume+0x40>
 800082c:	4629      	mov	r1, r5
 800082e:	4620      	mov	r0, r4
 8000830:	f7ff ff2a 	bl	8000688 <unwind_phase2>
 8000834:	4630      	mov	r0, r6
 8000836:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000838:	f7ff ff24 	bl	8000684 <_Unwind_DebugHook>
 800083c:	1d28      	adds	r0, r5, #4
 800083e:	f000 fb55 	bl	8000eec <__restore_core_regs>
 8000842:	2201      	movs	r2, #1
 8000844:	f7ff ff3e 	bl	80006c4 <unwind_phase2_forced>
 8000848:	f002 f848 	bl	80028dc <abort>
 800084c:	f002 f846 	bl	80028dc <abort>

08000850 <__gnu_Unwind_Resume_or_Rethrow>:
 8000850:	68c2      	ldr	r2, [r0, #12]
 8000852:	b11a      	cbz	r2, 800085c <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000854:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000856:	640a      	str	r2, [r1, #64]	; 0x40
 8000858:	2200      	movs	r2, #0
 800085a:	e733      	b.n	80006c4 <unwind_phase2_forced>
 800085c:	e79a      	b.n	8000794 <__gnu_Unwind_RaiseException>
 800085e:	bf00      	nop

08000860 <_Unwind_Complete>:
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop

08000864 <_Unwind_DeleteException>:
 8000864:	6883      	ldr	r3, [r0, #8]
 8000866:	4601      	mov	r1, r0
 8000868:	b10b      	cbz	r3, 800086e <_Unwind_DeleteException+0xa>
 800086a:	2001      	movs	r0, #1
 800086c:	4718      	bx	r3
 800086e:	4770      	bx	lr

08000870 <_Unwind_VRS_Get>:
 8000870:	2901      	cmp	r1, #1
 8000872:	d012      	beq.n	800089a <_Unwind_VRS_Get+0x2a>
 8000874:	d809      	bhi.n	800088a <_Unwind_VRS_Get+0x1a>
 8000876:	b973      	cbnz	r3, 8000896 <_Unwind_VRS_Get+0x26>
 8000878:	2a0f      	cmp	r2, #15
 800087a:	d80c      	bhi.n	8000896 <_Unwind_VRS_Get+0x26>
 800087c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000880:	4618      	mov	r0, r3
 8000882:	6853      	ldr	r3, [r2, #4]
 8000884:	9a00      	ldr	r2, [sp, #0]
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	4770      	bx	lr
 800088a:	3903      	subs	r1, #3
 800088c:	2901      	cmp	r1, #1
 800088e:	bf94      	ite	ls
 8000890:	2001      	movls	r0, #1
 8000892:	2002      	movhi	r0, #2
 8000894:	4770      	bx	lr
 8000896:	2002      	movs	r0, #2
 8000898:	4770      	bx	lr
 800089a:	4608      	mov	r0, r1
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <_Unwind_GetGR>:
 80008a0:	b500      	push	{lr}
 80008a2:	b085      	sub	sp, #20
 80008a4:	460a      	mov	r2, r1
 80008a6:	2300      	movs	r3, #0
 80008a8:	a903      	add	r1, sp, #12
 80008aa:	9100      	str	r1, [sp, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	f7ff ffdf 	bl	8000870 <_Unwind_VRS_Get>
 80008b2:	9803      	ldr	r0, [sp, #12]
 80008b4:	b005      	add	sp, #20
 80008b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80008ba:	bf00      	nop

080008bc <_Unwind_VRS_Set>:
 80008bc:	2901      	cmp	r1, #1
 80008be:	d012      	beq.n	80008e6 <_Unwind_VRS_Set+0x2a>
 80008c0:	d809      	bhi.n	80008d6 <_Unwind_VRS_Set+0x1a>
 80008c2:	b973      	cbnz	r3, 80008e2 <_Unwind_VRS_Set+0x26>
 80008c4:	2a0f      	cmp	r2, #15
 80008c6:	d80c      	bhi.n	80008e2 <_Unwind_VRS_Set+0x26>
 80008c8:	9900      	ldr	r1, [sp, #0]
 80008ca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008ce:	6809      	ldr	r1, [r1, #0]
 80008d0:	6051      	str	r1, [r2, #4]
 80008d2:	4618      	mov	r0, r3
 80008d4:	4770      	bx	lr
 80008d6:	3903      	subs	r1, #3
 80008d8:	2901      	cmp	r1, #1
 80008da:	bf94      	ite	ls
 80008dc:	2001      	movls	r0, #1
 80008de:	2002      	movhi	r0, #2
 80008e0:	4770      	bx	lr
 80008e2:	2002      	movs	r0, #2
 80008e4:	4770      	bx	lr
 80008e6:	4608      	mov	r0, r1
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <_Unwind_SetGR>:
 80008ec:	b510      	push	{r4, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	2300      	movs	r3, #0
 80008f2:	ac03      	add	r4, sp, #12
 80008f4:	9203      	str	r2, [sp, #12]
 80008f6:	9400      	str	r4, [sp, #0]
 80008f8:	460a      	mov	r2, r1
 80008fa:	4619      	mov	r1, r3
 80008fc:	f7ff ffde 	bl	80008bc <_Unwind_VRS_Set>
 8000900:	b004      	add	sp, #16
 8000902:	bd10      	pop	{r4, pc}

08000904 <__gnu_Unwind_Backtrace>:
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	f102 0c04 	add.w	ip, r2, #4
 800090e:	4605      	mov	r5, r0
 8000910:	460c      	mov	r4, r1
 8000912:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000916:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800091a:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 800091e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000922:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000926:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800092a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800092e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000932:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000936:	f04f 36ff 	mov.w	r6, #4294967295
 800093a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800093e:	9616      	str	r6, [sp, #88]	; 0x58
 8000940:	e010      	b.n	8000964 <__gnu_Unwind_Backtrace+0x60>
 8000942:	f7ff ffd3 	bl	80008ec <_Unwind_SetGR>
 8000946:	4621      	mov	r1, r4
 8000948:	a816      	add	r0, sp, #88	; 0x58
 800094a:	47a8      	blx	r5
 800094c:	4603      	mov	r3, r0
 800094e:	aa16      	add	r2, sp, #88	; 0x58
 8000950:	4669      	mov	r1, sp
 8000952:	2008      	movs	r0, #8
 8000954:	b983      	cbnz	r3, 8000978 <__gnu_Unwind_Backtrace+0x74>
 8000956:	9b04      	ldr	r3, [sp, #16]
 8000958:	4798      	blx	r3
 800095a:	2805      	cmp	r0, #5
 800095c:	4606      	mov	r6, r0
 800095e:	d00c      	beq.n	800097a <__gnu_Unwind_Backtrace+0x76>
 8000960:	2809      	cmp	r0, #9
 8000962:	d009      	beq.n	8000978 <__gnu_Unwind_Backtrace+0x74>
 8000964:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000966:	4668      	mov	r0, sp
 8000968:	f7ff fe0c 	bl	8000584 <get_eit_entry>
 800096c:	4603      	mov	r3, r0
 800096e:	466a      	mov	r2, sp
 8000970:	210c      	movs	r1, #12
 8000972:	a816      	add	r0, sp, #88	; 0x58
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0e4      	beq.n	8000942 <__gnu_Unwind_Backtrace+0x3e>
 8000978:	2609      	movs	r6, #9
 800097a:	a816      	add	r0, sp, #88	; 0x58
 800097c:	f7ff fe4e 	bl	800061c <restore_non_core_regs>
 8000980:	4630      	mov	r0, r6
 8000982:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8000986:	bd70      	pop	{r4, r5, r6, pc}

08000988 <__gnu_unwind_pr_common>:
 8000988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800098c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800098e:	b089      	sub	sp, #36	; 0x24
 8000990:	461e      	mov	r6, r3
 8000992:	f854 3b04 	ldr.w	r3, [r4], #4
 8000996:	9406      	str	r4, [sp, #24]
 8000998:	460d      	mov	r5, r1
 800099a:	4617      	mov	r7, r2
 800099c:	f000 0803 	and.w	r8, r0, #3
 80009a0:	2e00      	cmp	r6, #0
 80009a2:	d079      	beq.n	8000a98 <__gnu_unwind_pr_common+0x110>
 80009a4:	0c1a      	lsrs	r2, r3, #16
 80009a6:	f88d 201d 	strb.w	r2, [sp, #29]
 80009aa:	041b      	lsls	r3, r3, #16
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	9305      	str	r3, [sp, #20]
 80009b0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80009b4:	2302      	movs	r3, #2
 80009b6:	f88d 301c 	strb.w	r3, [sp, #28]
 80009ba:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80009bc:	f1b8 0f02 	cmp.w	r8, #2
 80009c0:	bf08      	it	eq
 80009c2:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80009c4:	f013 0301 	ands.w	r3, r3, #1
 80009c8:	d00c      	beq.n	80009e4 <__gnu_unwind_pr_common+0x5c>
 80009ca:	a905      	add	r1, sp, #20
 80009cc:	4638      	mov	r0, r7
 80009ce:	f000 fb8f 	bl	80010f0 <__gnu_unwind_execute>
 80009d2:	b918      	cbnz	r0, 80009dc <__gnu_unwind_pr_common+0x54>
 80009d4:	2008      	movs	r0, #8
 80009d6:	b009      	add	sp, #36	; 0x24
 80009d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009dc:	2009      	movs	r0, #9
 80009de:	b009      	add	sp, #36	; 0x24
 80009e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009e4:	f8d4 a000 	ldr.w	sl, [r4]
 80009e8:	f1ba 0f00 	cmp.w	sl, #0
 80009ec:	d0ed      	beq.n	80009ca <__gnu_unwind_pr_common+0x42>
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	f000 0308 	and.w	r3, r0, #8
 80009f4:	9302      	str	r3, [sp, #8]
 80009f6:	2e02      	cmp	r6, #2
 80009f8:	d04a      	beq.n	8000a90 <__gnu_unwind_pr_common+0x108>
 80009fa:	f8b4 a000 	ldrh.w	sl, [r4]
 80009fe:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000a02:	3404      	adds	r4, #4
 8000a04:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a06:	f029 0b01 	bic.w	fp, r9, #1
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	4638      	mov	r0, r7
 8000a0e:	449b      	add	fp, r3
 8000a10:	f7ff ff46 	bl	80008a0 <_Unwind_GetGR>
 8000a14:	4583      	cmp	fp, r0
 8000a16:	d839      	bhi.n	8000a8c <__gnu_unwind_pr_common+0x104>
 8000a18:	f02a 0201 	bic.w	r2, sl, #1
 8000a1c:	445a      	add	r2, fp
 8000a1e:	4282      	cmp	r2, r0
 8000a20:	bf94      	ite	ls
 8000a22:	2200      	movls	r2, #0
 8000a24:	2201      	movhi	r2, #1
 8000a26:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	f00a 0a01 	and.w	sl, sl, #1
 8000a32:	ea43 030a 	orr.w	r3, r3, sl
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d04b      	beq.n	8000ad2 <__gnu_unwind_pr_common+0x14a>
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d032      	beq.n	8000aa4 <__gnu_unwind_pr_common+0x11c>
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1cc      	bne.n	80009dc <__gnu_unwind_pr_common+0x54>
 8000a42:	f1b8 0f00 	cmp.w	r8, #0
 8000a46:	d002      	beq.n	8000a4e <__gnu_unwind_pr_common+0xc6>
 8000a48:	2a00      	cmp	r2, #0
 8000a4a:	f040 80cd 	bne.w	8000be8 <__gnu_unwind_pr_common+0x260>
 8000a4e:	3404      	adds	r4, #4
 8000a50:	f8d4 a000 	ldr.w	sl, [r4]
 8000a54:	f1ba 0f00 	cmp.w	sl, #0
 8000a58:	d1cd      	bne.n	80009f6 <__gnu_unwind_pr_common+0x6e>
 8000a5a:	a905      	add	r1, sp, #20
 8000a5c:	4638      	mov	r0, r7
 8000a5e:	f000 fb47 	bl	80010f0 <__gnu_unwind_execute>
 8000a62:	2800      	cmp	r0, #0
 8000a64:	d1ba      	bne.n	80009dc <__gnu_unwind_pr_common+0x54>
 8000a66:	9b01      	ldr	r3, [sp, #4]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d0b3      	beq.n	80009d4 <__gnu_unwind_pr_common+0x4c>
 8000a6c:	210f      	movs	r1, #15
 8000a6e:	4638      	mov	r0, r7
 8000a70:	f7ff ff16 	bl	80008a0 <_Unwind_GetGR>
 8000a74:	210e      	movs	r1, #14
 8000a76:	4602      	mov	r2, r0
 8000a78:	4638      	mov	r0, r7
 8000a7a:	f7ff ff37 	bl	80008ec <_Unwind_SetGR>
 8000a7e:	4638      	mov	r0, r7
 8000a80:	4a6a      	ldr	r2, [pc, #424]	; (8000c2c <__gnu_unwind_pr_common+0x2a4>)
 8000a82:	210f      	movs	r1, #15
 8000a84:	f7ff ff32 	bl	80008ec <_Unwind_SetGR>
 8000a88:	2007      	movs	r0, #7
 8000a8a:	e7a8      	b.n	80009de <__gnu_unwind_pr_common+0x56>
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	e7ca      	b.n	8000a26 <__gnu_unwind_pr_common+0x9e>
 8000a90:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000a94:	3408      	adds	r4, #8
 8000a96:	e7b5      	b.n	8000a04 <__gnu_unwind_pr_common+0x7c>
 8000a98:	021b      	lsls	r3, r3, #8
 8000a9a:	9305      	str	r3, [sp, #20]
 8000a9c:	f88d 601d 	strb.w	r6, [sp, #29]
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	e788      	b.n	80009b6 <__gnu_unwind_pr_common+0x2e>
 8000aa4:	f8d4 9000 	ldr.w	r9, [r4]
 8000aa8:	f029 4b00 	bic.w	fp, r9, #2147483648	; 0x80000000
 8000aac:	f1b8 0f00 	cmp.w	r8, #0
 8000ab0:	d146      	bne.n	8000b40 <__gnu_unwind_pr_common+0x1b8>
 8000ab2:	b12a      	cbz	r2, 8000ac0 <__gnu_unwind_pr_common+0x138>
 8000ab4:	9b02      	ldr	r3, [sp, #8]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d05b      	beq.n	8000b72 <__gnu_unwind_pr_common+0x1ea>
 8000aba:	f1bb 0f00 	cmp.w	fp, #0
 8000abe:	d073      	beq.n	8000ba8 <__gnu_unwind_pr_common+0x220>
 8000ac0:	f1b9 0f00 	cmp.w	r9, #0
 8000ac4:	da00      	bge.n	8000ac8 <__gnu_unwind_pr_common+0x140>
 8000ac6:	3404      	adds	r4, #4
 8000ac8:	f10b 0b01 	add.w	fp, fp, #1
 8000acc:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000ad0:	e7be      	b.n	8000a50 <__gnu_unwind_pr_common+0xc8>
 8000ad2:	f1b8 0f00 	cmp.w	r8, #0
 8000ad6:	d119      	bne.n	8000b0c <__gnu_unwind_pr_common+0x184>
 8000ad8:	b1b2      	cbz	r2, 8000b08 <__gnu_unwind_pr_common+0x180>
 8000ada:	6861      	ldr	r1, [r4, #4]
 8000adc:	6822      	ldr	r2, [r4, #0]
 8000ade:	1c88      	adds	r0, r1, #2
 8000ae0:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000ae4:	f43f af7a 	beq.w	80009dc <__gnu_unwind_pr_common+0x54>
 8000ae8:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000aec:	3101      	adds	r1, #1
 8000aee:	9304      	str	r3, [sp, #16]
 8000af0:	f000 808e 	beq.w	8000c10 <__gnu_unwind_pr_common+0x288>
 8000af4:	1d20      	adds	r0, r4, #4
 8000af6:	f7ff fdbf 	bl	8000678 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000afa:	ab04      	add	r3, sp, #16
 8000afc:	4601      	mov	r1, r0
 8000afe:	4628      	mov	r0, r5
 8000b00:	f3af 8000 	nop.w
 8000b04:	2800      	cmp	r0, #0
 8000b06:	d159      	bne.n	8000bbc <__gnu_unwind_pr_common+0x234>
 8000b08:	3408      	adds	r4, #8
 8000b0a:	e7a1      	b.n	8000a50 <__gnu_unwind_pr_common+0xc8>
 8000b0c:	210d      	movs	r1, #13
 8000b0e:	4638      	mov	r0, r7
 8000b10:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000b14:	f7ff fec4 	bl	80008a0 <_Unwind_GetGR>
 8000b18:	4581      	cmp	r9, r0
 8000b1a:	d1f5      	bne.n	8000b08 <__gnu_unwind_pr_common+0x180>
 8000b1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b1e:	429c      	cmp	r4, r3
 8000b20:	d1f2      	bne.n	8000b08 <__gnu_unwind_pr_common+0x180>
 8000b22:	4620      	mov	r0, r4
 8000b24:	f7ff fce2 	bl	80004ec <selfrel_offset31>
 8000b28:	210f      	movs	r1, #15
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	4638      	mov	r0, r7
 8000b2e:	f7ff fedd 	bl	80008ec <_Unwind_SetGR>
 8000b32:	4638      	mov	r0, r7
 8000b34:	462a      	mov	r2, r5
 8000b36:	2100      	movs	r1, #0
 8000b38:	f7ff fed8 	bl	80008ec <_Unwind_SetGR>
 8000b3c:	2007      	movs	r0, #7
 8000b3e:	e74e      	b.n	80009de <__gnu_unwind_pr_common+0x56>
 8000b40:	210d      	movs	r1, #13
 8000b42:	4638      	mov	r0, r7
 8000b44:	f8d5 a020 	ldr.w	sl, [r5, #32]
 8000b48:	f7ff feaa 	bl	80008a0 <_Unwind_GetGR>
 8000b4c:	4582      	cmp	sl, r0
 8000b4e:	d1b7      	bne.n	8000ac0 <__gnu_unwind_pr_common+0x138>
 8000b50:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b52:	429c      	cmp	r4, r3
 8000b54:	d1b4      	bne.n	8000ac0 <__gnu_unwind_pr_common+0x138>
 8000b56:	2304      	movs	r3, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 8000b5e:	18e3      	adds	r3, r4, r3
 8000b60:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000b64:	636b      	str	r3, [r5, #52]	; 0x34
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	db59      	blt.n	8000c20 <__gnu_unwind_pr_common+0x298>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	9301      	str	r3, [sp, #4]
 8000b70:	e7aa      	b.n	8000ac8 <__gnu_unwind_pr_common+0x140>
 8000b72:	4699      	mov	r9, r3
 8000b74:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000b78:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b7c:	f104 0a04 	add.w	sl, r4, #4
 8000b80:	46b0      	mov	r8, r6
 8000b82:	461e      	mov	r6, r3
 8000b84:	e00e      	b.n	8000ba4 <__gnu_unwind_pr_common+0x21c>
 8000b86:	4650      	mov	r0, sl
 8000b88:	9604      	str	r6, [sp, #16]
 8000b8a:	f7ff fd75 	bl	8000678 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000b8e:	2200      	movs	r2, #0
 8000b90:	4601      	mov	r1, r0
 8000b92:	ab04      	add	r3, sp, #16
 8000b94:	4628      	mov	r0, r5
 8000b96:	f109 0901 	add.w	r9, r9, #1
 8000b9a:	f10a 0a04 	add.w	sl, sl, #4
 8000b9e:	f3af 8000 	nop.w
 8000ba2:	b9d8      	cbnz	r0, 8000bdc <__gnu_unwind_pr_common+0x254>
 8000ba4:	45d9      	cmp	r9, fp
 8000ba6:	d1ee      	bne.n	8000b86 <__gnu_unwind_pr_common+0x1fe>
 8000ba8:	210d      	movs	r1, #13
 8000baa:	4638      	mov	r0, r7
 8000bac:	f7ff fe78 	bl	80008a0 <_Unwind_GetGR>
 8000bb0:	9b04      	ldr	r3, [sp, #16]
 8000bb2:	6228      	str	r0, [r5, #32]
 8000bb4:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8000bb8:	2006      	movs	r0, #6
 8000bba:	e710      	b.n	80009de <__gnu_unwind_pr_common+0x56>
 8000bbc:	4681      	mov	r9, r0
 8000bbe:	210d      	movs	r1, #13
 8000bc0:	4638      	mov	r0, r7
 8000bc2:	f7ff fe6d 	bl	80008a0 <_Unwind_GetGR>
 8000bc6:	f1b9 0f02 	cmp.w	r9, #2
 8000bca:	bf04      	itt	eq
 8000bcc:	462b      	moveq	r3, r5
 8000bce:	9a04      	ldreq	r2, [sp, #16]
 8000bd0:	6228      	str	r0, [r5, #32]
 8000bd2:	bf14      	ite	ne
 8000bd4:	9b04      	ldrne	r3, [sp, #16]
 8000bd6:	f843 2f2c 	streq.w	r2, [r3, #44]!
 8000bda:	e7eb      	b.n	8000bb4 <__gnu_unwind_pr_common+0x22c>
 8000bdc:	4646      	mov	r6, r8
 8000bde:	f8d4 9000 	ldr.w	r9, [r4]
 8000be2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000be6:	e76b      	b.n	8000ac0 <__gnu_unwind_pr_common+0x138>
 8000be8:	4620      	mov	r0, r4
 8000bea:	f7ff fc7f 	bl	80004ec <selfrel_offset31>
 8000bee:	3404      	adds	r4, #4
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	63ac      	str	r4, [r5, #56]	; 0x38
 8000bf4:	4628      	mov	r0, r5
 8000bf6:	4614      	mov	r4, r2
 8000bf8:	f3af 8000 	nop.w
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	f43f aeed 	beq.w	80009dc <__gnu_unwind_pr_common+0x54>
 8000c02:	4638      	mov	r0, r7
 8000c04:	4622      	mov	r2, r4
 8000c06:	210f      	movs	r1, #15
 8000c08:	f7ff fe70 	bl	80008ec <_Unwind_SetGR>
 8000c0c:	2007      	movs	r0, #7
 8000c0e:	e6e6      	b.n	80009de <__gnu_unwind_pr_common+0x56>
 8000c10:	210d      	movs	r1, #13
 8000c12:	4638      	mov	r0, r7
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	f7ff fe43 	bl	80008a0 <_Unwind_GetGR>
 8000c1a:	9b01      	ldr	r3, [sp, #4]
 8000c1c:	6228      	str	r0, [r5, #32]
 8000c1e:	e7c9      	b.n	8000bb4 <__gnu_unwind_pr_common+0x22c>
 8000c20:	f10b 0001 	add.w	r0, fp, #1
 8000c24:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c28:	e77c      	b.n	8000b24 <__gnu_unwind_pr_common+0x19c>
 8000c2a:	bf00      	nop
 8000c2c:	00000000 	.word	0x00000000

08000c30 <__aeabi_unwind_cpp_pr0>:
 8000c30:	2300      	movs	r3, #0
 8000c32:	e6a9      	b.n	8000988 <__gnu_unwind_pr_common>

08000c34 <__aeabi_unwind_cpp_pr1>:
 8000c34:	2301      	movs	r3, #1
 8000c36:	e6a7      	b.n	8000988 <__gnu_unwind_pr_common>

08000c38 <__aeabi_unwind_cpp_pr2>:
 8000c38:	2302      	movs	r3, #2
 8000c3a:	e6a5      	b.n	8000988 <__gnu_unwind_pr_common>

08000c3c <_Unwind_VRS_Pop>:
 8000c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c40:	4606      	mov	r6, r0
 8000c42:	b0c3      	sub	sp, #268	; 0x10c
 8000c44:	4691      	mov	r9, r2
 8000c46:	461c      	mov	r4, r3
 8000c48:	2904      	cmp	r1, #4
 8000c4a:	f200 809b 	bhi.w	8000d84 <_Unwind_VRS_Pop+0x148>
 8000c4e:	e8df f001 	tbb	[pc, r1]
 8000c52:	567b      	.short	0x567b
 8000c54:	2e99      	.short	0x2e99
 8000c56:	03          	.byte	0x03
 8000c57:	00          	.byte	0x00
 8000c58:	2c00      	cmp	r4, #0
 8000c5a:	f040 8093 	bne.w	8000d84 <_Unwind_VRS_Pop+0x148>
 8000c5e:	2a10      	cmp	r2, #16
 8000c60:	f200 8090 	bhi.w	8000d84 <_Unwind_VRS_Pop+0x148>
 8000c64:	6803      	ldr	r3, [r0, #0]
 8000c66:	06dc      	lsls	r4, r3, #27
 8000c68:	f100 80f3 	bmi.w	8000e52 <_Unwind_VRS_Pop+0x216>
 8000c6c:	af20      	add	r7, sp, #128	; 0x80
 8000c6e:	4638      	mov	r0, r7
 8000c70:	f000 f9ae 	bl	8000fd0 <__gnu_Unwind_Save_WMMXC>
 8000c74:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 8000c76:	4639      	mov	r1, r7
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f04f 0c01 	mov.w	ip, #1
 8000c7e:	fa0c f203 	lsl.w	r2, ip, r3
 8000c82:	ea12 0f09 	tst.w	r2, r9
 8000c86:	4620      	mov	r0, r4
 8000c88:	f103 0301 	add.w	r3, r3, #1
 8000c8c:	d003      	beq.n	8000c96 <_Unwind_VRS_Pop+0x5a>
 8000c8e:	f850 2b04 	ldr.w	r2, [r0], #4
 8000c92:	600a      	str	r2, [r1, #0]
 8000c94:	4604      	mov	r4, r0
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	f101 0104 	add.w	r1, r1, #4
 8000c9c:	d1ef      	bne.n	8000c7e <_Unwind_VRS_Pop+0x42>
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	63b4      	str	r4, [r6, #56]	; 0x38
 8000ca2:	f000 f98b 	bl	8000fbc <__gnu_Unwind_Restore_WMMXC>
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	b043      	add	sp, #268	; 0x10c
 8000caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cae:	2c03      	cmp	r4, #3
 8000cb0:	d168      	bne.n	8000d84 <_Unwind_VRS_Pop+0x148>
 8000cb2:	b294      	uxth	r4, r2
 8000cb4:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000cb8:	2b10      	cmp	r3, #16
 8000cba:	ea4f 4912 	mov.w	r9, r2, lsr #16
 8000cbe:	d861      	bhi.n	8000d84 <_Unwind_VRS_Pop+0x148>
 8000cc0:	6803      	ldr	r3, [r0, #0]
 8000cc2:	071d      	lsls	r5, r3, #28
 8000cc4:	f100 80cd 	bmi.w	8000e62 <_Unwind_VRS_Pop+0x226>
 8000cc8:	af20      	add	r7, sp, #128	; 0x80
 8000cca:	4638      	mov	r0, r7
 8000ccc:	f000 f954 	bl	8000f78 <__gnu_Unwind_Save_WMMXD>
 8000cd0:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000cd2:	eb07 01c9 	add.w	r1, r7, r9, lsl #3
 8000cd6:	b154      	cbz	r4, 8000cee <_Unwind_VRS_Pop+0xb2>
 8000cd8:	460b      	mov	r3, r1
 8000cda:	1ad0      	subs	r0, r2, r3
 8000cdc:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000ce0:	00e4      	lsls	r4, r4, #3
 8000ce2:	581d      	ldr	r5, [r3, r0]
 8000ce4:	f843 5b04 	str.w	r5, [r3], #4
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d1fa      	bne.n	8000ce2 <_Unwind_VRS_Pop+0xa6>
 8000cec:	4422      	add	r2, r4
 8000cee:	4638      	mov	r0, r7
 8000cf0:	63b2      	str	r2, [r6, #56]	; 0x38
 8000cf2:	f000 f91f 	bl	8000f34 <__gnu_Unwind_Restore_WMMXD>
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	b043      	add	sp, #268	; 0x10c
 8000cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cfe:	2c01      	cmp	r4, #1
 8000d00:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000d04:	fa1f f982 	uxth.w	r9, r2
 8000d08:	d038      	beq.n	8000d7c <_Unwind_VRS_Pop+0x140>
 8000d0a:	2c05      	cmp	r4, #5
 8000d0c:	d13a      	bne.n	8000d84 <_Unwind_VRS_Pop+0x148>
 8000d0e:	eb08 0309 	add.w	r3, r8, r9
 8000d12:	2b20      	cmp	r3, #32
 8000d14:	d836      	bhi.n	8000d84 <_Unwind_VRS_Pop+0x148>
 8000d16:	f1b8 0f0f 	cmp.w	r8, #15
 8000d1a:	d976      	bls.n	8000e0a <_Unwind_VRS_Pop+0x1ce>
 8000d1c:	f1b9 0f00 	cmp.w	r9, #0
 8000d20:	f040 8083 	bne.w	8000e2a <_Unwind_VRS_Pop+0x1ee>
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d80b      	bhi.n	8000d40 <_Unwind_VRS_Pop+0x104>
 8000d28:	6833      	ldr	r3, [r6, #0]
 8000d2a:	07d8      	lsls	r0, r3, #31
 8000d2c:	d508      	bpl.n	8000d40 <_Unwind_VRS_Pop+0x104>
 8000d2e:	4630      	mov	r0, r6
 8000d30:	f023 0301 	bic.w	r3, r3, #1
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	f840 3b48 	str.w	r3, [r0], #72
 8000d3c:	f000 f8ee 	bl	8000f1c <__gnu_Unwind_Save_VFP_D>
 8000d40:	2000      	movs	r0, #0
 8000d42:	b043      	add	sp, #268	; 0x10c
 8000d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d48:	b9e4      	cbnz	r4, 8000d84 <_Unwind_VRS_Pop+0x148>
 8000d4a:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8000d4c:	4623      	mov	r3, r4
 8000d4e:	fa1f fc82 	uxth.w	ip, r2
 8000d52:	2001      	movs	r0, #1
 8000d54:	1d34      	adds	r4, r6, #4
 8000d56:	fa00 f203 	lsl.w	r2, r0, r3
 8000d5a:	ea12 0f0c 	tst.w	r2, ip
 8000d5e:	4639      	mov	r1, r7
 8000d60:	d004      	beq.n	8000d6c <_Unwind_VRS_Pop+0x130>
 8000d62:	f851 2b04 	ldr.w	r2, [r1], #4
 8000d66:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8000d6a:	460f      	mov	r7, r1
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	2b10      	cmp	r3, #16
 8000d70:	d1f1      	bne.n	8000d56 <_Unwind_VRS_Pop+0x11a>
 8000d72:	f419 5000 	ands.w	r0, r9, #8192	; 0x2000
 8000d76:	d1e3      	bne.n	8000d40 <_Unwind_VRS_Pop+0x104>
 8000d78:	63b7      	str	r7, [r6, #56]	; 0x38
 8000d7a:	e004      	b.n	8000d86 <_Unwind_VRS_Pop+0x14a>
 8000d7c:	eb08 0309 	add.w	r3, r8, r9
 8000d80:	2b10      	cmp	r3, #16
 8000d82:	d903      	bls.n	8000d8c <_Unwind_VRS_Pop+0x150>
 8000d84:	2002      	movs	r0, #2
 8000d86:	b043      	add	sp, #268	; 0x10c
 8000d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d8c:	f1b8 0f0f 	cmp.w	r8, #15
 8000d90:	d8f8      	bhi.n	8000d84 <_Unwind_VRS_Pop+0x148>
 8000d92:	6833      	ldr	r3, [r6, #0]
 8000d94:	07da      	lsls	r2, r3, #31
 8000d96:	d506      	bpl.n	8000da6 <_Unwind_VRS_Pop+0x16a>
 8000d98:	4630      	mov	r0, r6
 8000d9a:	f023 0303 	bic.w	r3, r3, #3
 8000d9e:	f840 3b48 	str.w	r3, [r0], #72
 8000da2:	f000 f8b3 	bl	8000f0c <__gnu_Unwind_Save_VFP>
 8000da6:	af20      	add	r7, sp, #128	; 0x80
 8000da8:	4638      	mov	r0, r7
 8000daa:	464d      	mov	r5, r9
 8000dac:	f000 f8ae 	bl	8000f0c <__gnu_Unwind_Save_VFP>
 8000db0:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d05e      	beq.n	8000e74 <_Unwind_VRS_Pop+0x238>
 8000db6:	f04f 0900 	mov.w	r9, #0
 8000dba:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8000dbe:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
 8000dc2:	3904      	subs	r1, #4
 8000dc4:	f852 0b04 	ldr.w	r0, [r2], #4
 8000dc8:	f841 0f04 	str.w	r0, [r1, #4]!
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d1f9      	bne.n	8000dc4 <_Unwind_VRS_Pop+0x188>
 8000dd0:	f1b9 0f00 	cmp.w	r9, #0
 8000dd4:	d054      	beq.n	8000e80 <_Unwind_VRS_Pop+0x244>
 8000dd6:	466f      	mov	r7, sp
 8000dd8:	4641      	mov	r1, r8
 8000dda:	2910      	cmp	r1, #16
 8000ddc:	bf38      	it	cc
 8000dde:	2110      	movcc	r1, #16
 8000de0:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000de4:	3984      	subs	r1, #132	; 0x84
 8000de6:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
 8000dea:	f853 5b04 	ldr.w	r5, [r3], #4
 8000dee:	f841 5f04 	str.w	r5, [r1, #4]!
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d1f9      	bne.n	8000dea <_Unwind_VRS_Pop+0x1ae>
 8000df6:	2c01      	cmp	r4, #1
 8000df8:	d03b      	beq.n	8000e72 <_Unwind_VRS_Pop+0x236>
 8000dfa:	f1b8 0f0f 	cmp.w	r8, #15
 8000dfe:	63b2      	str	r2, [r6, #56]	; 0x38
 8000e00:	d958      	bls.n	8000eb4 <_Unwind_VRS_Pop+0x278>
 8000e02:	4638      	mov	r0, r7
 8000e04:	f000 f88e 	bl	8000f24 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e08:	e79a      	b.n	8000d40 <_Unwind_VRS_Pop+0x104>
 8000e0a:	2b10      	cmp	r3, #16
 8000e0c:	d954      	bls.n	8000eb8 <_Unwind_VRS_Pop+0x27c>
 8000e0e:	6832      	ldr	r2, [r6, #0]
 8000e10:	07d7      	lsls	r7, r2, #31
 8000e12:	f1a3 0910 	sub.w	r9, r3, #16
 8000e16:	d509      	bpl.n	8000e2c <_Unwind_VRS_Pop+0x1f0>
 8000e18:	f022 0301 	bic.w	r3, r2, #1
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	f840 3b48 	str.w	r3, [r0], #72
 8000e26:	f000 f879 	bl	8000f1c <__gnu_Unwind_Save_VFP_D>
 8000e2a:	6832      	ldr	r2, [r6, #0]
 8000e2c:	0753      	lsls	r3, r2, #29
 8000e2e:	d439      	bmi.n	8000ea4 <_Unwind_VRS_Pop+0x268>
 8000e30:	f1b8 0f0f 	cmp.w	r8, #15
 8000e34:	d802      	bhi.n	8000e3c <_Unwind_VRS_Pop+0x200>
 8000e36:	a820      	add	r0, sp, #128	; 0x80
 8000e38:	f000 f870 	bl	8000f1c <__gnu_Unwind_Save_VFP_D>
 8000e3c:	466f      	mov	r7, sp
 8000e3e:	4638      	mov	r0, r7
 8000e40:	f1c8 0510 	rsb	r5, r8, #16
 8000e44:	f000 f872 	bl	8000f2c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000e4c:	dd28      	ble.n	8000ea0 <_Unwind_VRS_Pop+0x264>
 8000e4e:	af20      	add	r7, sp, #128	; 0x80
 8000e50:	e7b3      	b.n	8000dba <_Unwind_VRS_Pop+0x17e>
 8000e52:	f023 0310 	bic.w	r3, r3, #16
 8000e56:	6003      	str	r3, [r0, #0]
 8000e58:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 8000e5c:	f000 f8b8 	bl	8000fd0 <__gnu_Unwind_Save_WMMXC>
 8000e60:	e704      	b.n	8000c6c <_Unwind_VRS_Pop+0x30>
 8000e62:	f023 0308 	bic.w	r3, r3, #8
 8000e66:	6003      	str	r3, [r0, #0]
 8000e68:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000e6c:	f000 f884 	bl	8000f78 <__gnu_Unwind_Save_WMMXD>
 8000e70:	e72a      	b.n	8000cc8 <_Unwind_VRS_Pop+0x8c>
 8000e72:	af20      	add	r7, sp, #128	; 0x80
 8000e74:	3204      	adds	r2, #4
 8000e76:	63b2      	str	r2, [r6, #56]	; 0x38
 8000e78:	4638      	mov	r0, r7
 8000e7a:	f000 f843 	bl	8000f04 <__gnu_Unwind_Restore_VFP>
 8000e7e:	e75f      	b.n	8000d40 <_Unwind_VRS_Pop+0x104>
 8000e80:	2c01      	cmp	r4, #1
 8000e82:	d0f7      	beq.n	8000e74 <_Unwind_VRS_Pop+0x238>
 8000e84:	f1b8 0f0f 	cmp.w	r8, #15
 8000e88:	63b2      	str	r2, [r6, #56]	; 0x38
 8000e8a:	f63f af59 	bhi.w	8000d40 <_Unwind_VRS_Pop+0x104>
 8000e8e:	4638      	mov	r0, r7
 8000e90:	f000 f840 	bl	8000f14 <__gnu_Unwind_Restore_VFP_D>
 8000e94:	f1b9 0f00 	cmp.w	r9, #0
 8000e98:	f43f af52 	beq.w	8000d40 <_Unwind_VRS_Pop+0x104>
 8000e9c:	466f      	mov	r7, sp
 8000e9e:	e7b0      	b.n	8000e02 <_Unwind_VRS_Pop+0x1c6>
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	e799      	b.n	8000dd8 <_Unwind_VRS_Pop+0x19c>
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	f022 0204 	bic.w	r2, r2, #4
 8000eaa:	f840 2bd0 	str.w	r2, [r0], #208
 8000eae:	f000 f83d 	bl	8000f2c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000eb2:	e7bd      	b.n	8000e30 <_Unwind_VRS_Pop+0x1f4>
 8000eb4:	af20      	add	r7, sp, #128	; 0x80
 8000eb6:	e7ea      	b.n	8000e8e <_Unwind_VRS_Pop+0x252>
 8000eb8:	6833      	ldr	r3, [r6, #0]
 8000eba:	07d9      	lsls	r1, r3, #31
 8000ebc:	d508      	bpl.n	8000ed0 <_Unwind_VRS_Pop+0x294>
 8000ebe:	f023 0301 	bic.w	r3, r3, #1
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	f840 3b48 	str.w	r3, [r0], #72
 8000ecc:	f000 f826 	bl	8000f1c <__gnu_Unwind_Save_VFP_D>
 8000ed0:	af20      	add	r7, sp, #128	; 0x80
 8000ed2:	4638      	mov	r0, r7
 8000ed4:	464d      	mov	r5, r9
 8000ed6:	f000 f821 	bl	8000f1c <__gnu_Unwind_Save_VFP_D>
 8000eda:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000edc:	2d00      	cmp	r5, #0
 8000ede:	f47f af6a 	bne.w	8000db6 <_Unwind_VRS_Pop+0x17a>
 8000ee2:	4638      	mov	r0, r7
 8000ee4:	f000 f816 	bl	8000f14 <__gnu_Unwind_Restore_VFP_D>
 8000ee8:	e72a      	b.n	8000d40 <_Unwind_VRS_Pop+0x104>
 8000eea:	bf00      	nop

08000eec <__restore_core_regs>:
 8000eec:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000ef0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000ef4:	469c      	mov	ip, r3
 8000ef6:	46a6      	mov	lr, r4
 8000ef8:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000efc:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000f00:	46e5      	mov	sp, ip
 8000f02:	bd00      	pop	{pc}

08000f04 <__gnu_Unwind_Restore_VFP>:
 8000f04:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <__gnu_Unwind_Save_VFP>:
 8000f0c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <__gnu_Unwind_Restore_VFP_D>:
 8000f14:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__gnu_Unwind_Save_VFP_D>:
 8000f1c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f24:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f2c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <__gnu_Unwind_Restore_WMMXD>:
 8000f34:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f38:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f3c:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f40:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f44:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f48:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f4c:	ecf0 6102 	ldfe	f6, [r0], #8
 8000f50:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f54:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f58:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f5c:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f60:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f64:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f68:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f6c:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f70:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <__gnu_Unwind_Save_WMMXD>:
 8000f78:	ece0 0102 	stfe	f0, [r0], #8
 8000f7c:	ece0 1102 	stfe	f1, [r0], #8
 8000f80:	ece0 2102 	stfe	f2, [r0], #8
 8000f84:	ece0 3102 	stfe	f3, [r0], #8
 8000f88:	ece0 4102 	stfe	f4, [r0], #8
 8000f8c:	ece0 5102 	stfe	f5, [r0], #8
 8000f90:	ece0 6102 	stfe	f6, [r0], #8
 8000f94:	ece0 7102 	stfe	f7, [r0], #8
 8000f98:	ece0 8102 	stfp	f0, [r0], #8
 8000f9c:	ece0 9102 	stfp	f1, [r0], #8
 8000fa0:	ece0 a102 	stfp	f2, [r0], #8
 8000fa4:	ece0 b102 	stfp	f3, [r0], #8
 8000fa8:	ece0 c102 	stfp	f4, [r0], #8
 8000fac:	ece0 d102 	stfp	f5, [r0], #8
 8000fb0:	ece0 e102 	stfp	f6, [r0], #8
 8000fb4:	ece0 f102 	stfp	f7, [r0], #8
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <__gnu_Unwind_Restore_WMMXC>:
 8000fbc:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000fc0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000fc4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000fc8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <__gnu_Unwind_Save_WMMXC>:
 8000fd0:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000fd4:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000fd8:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000fdc:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <_Unwind_RaiseException>:
 8000fe4:	46ec      	mov	ip, sp
 8000fe6:	b500      	push	{lr}
 8000fe8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000fec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000ff0:	f04f 0300 	mov.w	r3, #0
 8000ff4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ff8:	a901      	add	r1, sp, #4
 8000ffa:	f7ff fbcb 	bl	8000794 <__gnu_Unwind_RaiseException>
 8000ffe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001002:	b012      	add	sp, #72	; 0x48
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <_Unwind_Resume>:
 8001008:	46ec      	mov	ip, sp
 800100a:	b500      	push	{lr}
 800100c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001010:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	e92d 000c 	stmdb	sp!, {r2, r3}
 800101c:	a901      	add	r1, sp, #4
 800101e:	f7ff fbf5 	bl	800080c <__gnu_Unwind_Resume>
 8001022:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001026:	b012      	add	sp, #72	; 0x48
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <_Unwind_Resume_or_Rethrow>:
 800102c:	46ec      	mov	ip, sp
 800102e:	b500      	push	{lr}
 8001030:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001034:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001040:	a901      	add	r1, sp, #4
 8001042:	f7ff fc05 	bl	8000850 <__gnu_Unwind_Resume_or_Rethrow>
 8001046:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800104a:	b012      	add	sp, #72	; 0x48
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <_Unwind_ForcedUnwind>:
 8001050:	46ec      	mov	ip, sp
 8001052:	b500      	push	{lr}
 8001054:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001058:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001064:	ab01      	add	r3, sp, #4
 8001066:	f7ff fbc9 	bl	80007fc <__gnu_Unwind_ForcedUnwind>
 800106a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800106e:	b012      	add	sp, #72	; 0x48
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <_Unwind_Backtrace>:
 8001074:	46ec      	mov	ip, sp
 8001076:	b500      	push	{lr}
 8001078:	e92d 5000 	stmdb	sp!, {ip, lr}
 800107c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001088:	aa01      	add	r2, sp, #4
 800108a:	f7ff fc3b 	bl	8000904 <__gnu_Unwind_Backtrace>
 800108e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001092:	b012      	add	sp, #72	; 0x48
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <next_unwind_byte>:
 8001098:	7a02      	ldrb	r2, [r0, #8]
 800109a:	4603      	mov	r3, r0
 800109c:	b97a      	cbnz	r2, 80010be <next_unwind_byte+0x26>
 800109e:	7a42      	ldrb	r2, [r0, #9]
 80010a0:	b1a2      	cbz	r2, 80010cc <next_unwind_byte+0x34>
 80010a2:	6841      	ldr	r1, [r0, #4]
 80010a4:	3a01      	subs	r2, #1
 80010a6:	b410      	push	{r4}
 80010a8:	7242      	strb	r2, [r0, #9]
 80010aa:	6808      	ldr	r0, [r1, #0]
 80010ac:	2203      	movs	r2, #3
 80010ae:	1d0c      	adds	r4, r1, #4
 80010b0:	721a      	strb	r2, [r3, #8]
 80010b2:	0202      	lsls	r2, r0, #8
 80010b4:	605c      	str	r4, [r3, #4]
 80010b6:	0e00      	lsrs	r0, r0, #24
 80010b8:	bc10      	pop	{r4}
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	4770      	bx	lr
 80010be:	6800      	ldr	r0, [r0, #0]
 80010c0:	3a01      	subs	r2, #1
 80010c2:	721a      	strb	r2, [r3, #8]
 80010c4:	0202      	lsls	r2, r0, #8
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	0e00      	lsrs	r0, r0, #24
 80010ca:	4770      	bx	lr
 80010cc:	20b0      	movs	r0, #176	; 0xb0
 80010ce:	4770      	bx	lr

080010d0 <_Unwind_GetGR.constprop.0>:
 80010d0:	b500      	push	{lr}
 80010d2:	b085      	sub	sp, #20
 80010d4:	2300      	movs	r3, #0
 80010d6:	aa03      	add	r2, sp, #12
 80010d8:	9200      	str	r2, [sp, #0]
 80010da:	4619      	mov	r1, r3
 80010dc:	220c      	movs	r2, #12
 80010de:	f7ff fbc7 	bl	8000870 <_Unwind_VRS_Get>
 80010e2:	9803      	ldr	r0, [sp, #12]
 80010e4:	b005      	add	sp, #20
 80010e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80010ea:	bf00      	nop

080010ec <unwind_UCB_from_context>:
 80010ec:	e7f0      	b.n	80010d0 <_Unwind_GetGR.constprop.0>
 80010ee:	bf00      	nop

080010f0 <__gnu_unwind_execute>:
 80010f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010f4:	b085      	sub	sp, #20
 80010f6:	4607      	mov	r7, r0
 80010f8:	460e      	mov	r6, r1
 80010fa:	f04f 0800 	mov.w	r8, #0
 80010fe:	ad03      	add	r5, sp, #12
 8001100:	4630      	mov	r0, r6
 8001102:	f7ff ffc9 	bl	8001098 <next_unwind_byte>
 8001106:	28b0      	cmp	r0, #176	; 0xb0
 8001108:	4604      	mov	r4, r0
 800110a:	f000 80cb 	beq.w	80012a4 <__gnu_unwind_execute+0x1b4>
 800110e:	0603      	lsls	r3, r0, #24
 8001110:	d540      	bpl.n	8001194 <__gnu_unwind_execute+0xa4>
 8001112:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001116:	2b80      	cmp	r3, #128	; 0x80
 8001118:	d056      	beq.n	80011c8 <__gnu_unwind_execute+0xd8>
 800111a:	2bb0      	cmp	r3, #176	; 0xb0
 800111c:	d07d      	beq.n	800121a <__gnu_unwind_execute+0x12a>
 800111e:	d81c      	bhi.n	800115a <__gnu_unwind_execute+0x6a>
 8001120:	2b90      	cmp	r3, #144	; 0x90
 8001122:	f000 8093 	beq.w	800124c <__gnu_unwind_execute+0x15c>
 8001126:	2ba0      	cmp	r3, #160	; 0xa0
 8001128:	d113      	bne.n	8001152 <__gnu_unwind_execute+0x62>
 800112a:	43c3      	mvns	r3, r0
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001134:	411a      	asrs	r2, r3
 8001136:	0701      	lsls	r1, r0, #28
 8001138:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	bf48      	it	mi
 8001142:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001146:	4619      	mov	r1, r3
 8001148:	4638      	mov	r0, r7
 800114a:	f7ff fd77 	bl	8000c3c <_Unwind_VRS_Pop>
 800114e:	2800      	cmp	r0, #0
 8001150:	d0d6      	beq.n	8001100 <__gnu_unwind_execute+0x10>
 8001152:	2009      	movs	r0, #9
 8001154:	b005      	add	sp, #20
 8001156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800115a:	2bc0      	cmp	r3, #192	; 0xc0
 800115c:	d14b      	bne.n	80011f6 <__gnu_unwind_execute+0x106>
 800115e:	28c6      	cmp	r0, #198	; 0xc6
 8001160:	f000 8089 	beq.w	8001276 <__gnu_unwind_execute+0x186>
 8001164:	28c7      	cmp	r0, #199	; 0xc7
 8001166:	f000 80a2 	beq.w	80012ae <__gnu_unwind_execute+0x1be>
 800116a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800116e:	2bc0      	cmp	r3, #192	; 0xc0
 8001170:	f000 80bc 	beq.w	80012ec <__gnu_unwind_execute+0x1fc>
 8001174:	28c8      	cmp	r0, #200	; 0xc8
 8001176:	f000 80bf 	beq.w	80012f8 <__gnu_unwind_execute+0x208>
 800117a:	28c9      	cmp	r0, #201	; 0xc9
 800117c:	d1e9      	bne.n	8001152 <__gnu_unwind_execute+0x62>
 800117e:	4630      	mov	r0, r6
 8001180:	f7ff ff8a 	bl	8001098 <next_unwind_byte>
 8001184:	0302      	lsls	r2, r0, #12
 8001186:	f000 000f 	and.w	r0, r0, #15
 800118a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800118e:	3001      	adds	r0, #1
 8001190:	4302      	orrs	r2, r0
 8001192:	e039      	b.n	8001208 <__gnu_unwind_execute+0x118>
 8001194:	0083      	lsls	r3, r0, #2
 8001196:	b2db      	uxtb	r3, r3
 8001198:	f103 0904 	add.w	r9, r3, #4
 800119c:	2300      	movs	r3, #0
 800119e:	4619      	mov	r1, r3
 80011a0:	9500      	str	r5, [sp, #0]
 80011a2:	220d      	movs	r2, #13
 80011a4:	4638      	mov	r0, r7
 80011a6:	f7ff fb63 	bl	8000870 <_Unwind_VRS_Get>
 80011aa:	9b03      	ldr	r3, [sp, #12]
 80011ac:	0660      	lsls	r0, r4, #25
 80011ae:	bf4c      	ite	mi
 80011b0:	eba3 0309 	submi.w	r3, r3, r9
 80011b4:	444b      	addpl	r3, r9
 80011b6:	9303      	str	r3, [sp, #12]
 80011b8:	2300      	movs	r3, #0
 80011ba:	9500      	str	r5, [sp, #0]
 80011bc:	220d      	movs	r2, #13
 80011be:	4619      	mov	r1, r3
 80011c0:	4638      	mov	r0, r7
 80011c2:	f7ff fb7b 	bl	80008bc <_Unwind_VRS_Set>
 80011c6:	e79b      	b.n	8001100 <__gnu_unwind_execute+0x10>
 80011c8:	0204      	lsls	r4, r0, #8
 80011ca:	4630      	mov	r0, r6
 80011cc:	f7ff ff64 	bl	8001098 <next_unwind_byte>
 80011d0:	4320      	orrs	r0, r4
 80011d2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80011d6:	d0bc      	beq.n	8001152 <__gnu_unwind_execute+0x62>
 80011d8:	0104      	lsls	r4, r0, #4
 80011da:	2300      	movs	r3, #0
 80011dc:	b2a2      	uxth	r2, r4
 80011de:	4619      	mov	r1, r3
 80011e0:	4638      	mov	r0, r7
 80011e2:	f7ff fd2b 	bl	8000c3c <_Unwind_VRS_Pop>
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d1b3      	bne.n	8001152 <__gnu_unwind_execute+0x62>
 80011ea:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80011ee:	bf18      	it	ne
 80011f0:	f04f 0801 	movne.w	r8, #1
 80011f4:	e784      	b.n	8001100 <__gnu_unwind_execute+0x10>
 80011f6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80011fa:	2bd0      	cmp	r3, #208	; 0xd0
 80011fc:	d1a9      	bne.n	8001152 <__gnu_unwind_execute+0x62>
 80011fe:	f000 0207 	and.w	r2, r0, #7
 8001202:	3201      	adds	r2, #1
 8001204:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001208:	2305      	movs	r3, #5
 800120a:	2101      	movs	r1, #1
 800120c:	4638      	mov	r0, r7
 800120e:	f7ff fd15 	bl	8000c3c <_Unwind_VRS_Pop>
 8001212:	2800      	cmp	r0, #0
 8001214:	f43f af74 	beq.w	8001100 <__gnu_unwind_execute+0x10>
 8001218:	e79b      	b.n	8001152 <__gnu_unwind_execute+0x62>
 800121a:	28b1      	cmp	r0, #177	; 0xb1
 800121c:	d037      	beq.n	800128e <__gnu_unwind_execute+0x19e>
 800121e:	28b2      	cmp	r0, #178	; 0xb2
 8001220:	f000 8087 	beq.w	8001332 <__gnu_unwind_execute+0x242>
 8001224:	28b3      	cmp	r0, #179	; 0xb3
 8001226:	d056      	beq.n	80012d6 <__gnu_unwind_execute+0x1e6>
 8001228:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800122c:	2bb4      	cmp	r3, #180	; 0xb4
 800122e:	d090      	beq.n	8001152 <__gnu_unwind_execute+0x62>
 8001230:	f000 0207 	and.w	r2, r0, #7
 8001234:	3201      	adds	r2, #1
 8001236:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800123a:	2301      	movs	r3, #1
 800123c:	4619      	mov	r1, r3
 800123e:	4638      	mov	r0, r7
 8001240:	f7ff fcfc 	bl	8000c3c <_Unwind_VRS_Pop>
 8001244:	2800      	cmp	r0, #0
 8001246:	f43f af5b 	beq.w	8001100 <__gnu_unwind_execute+0x10>
 800124a:	e782      	b.n	8001152 <__gnu_unwind_execute+0x62>
 800124c:	f000 030d 	and.w	r3, r0, #13
 8001250:	2b0d      	cmp	r3, #13
 8001252:	f43f af7e 	beq.w	8001152 <__gnu_unwind_execute+0x62>
 8001256:	2300      	movs	r3, #0
 8001258:	f000 020f 	and.w	r2, r0, #15
 800125c:	4619      	mov	r1, r3
 800125e:	9500      	str	r5, [sp, #0]
 8001260:	4638      	mov	r0, r7
 8001262:	f7ff fb05 	bl	8000870 <_Unwind_VRS_Get>
 8001266:	2300      	movs	r3, #0
 8001268:	9500      	str	r5, [sp, #0]
 800126a:	220d      	movs	r2, #13
 800126c:	4619      	mov	r1, r3
 800126e:	4638      	mov	r0, r7
 8001270:	f7ff fb24 	bl	80008bc <_Unwind_VRS_Set>
 8001274:	e744      	b.n	8001100 <__gnu_unwind_execute+0x10>
 8001276:	4630      	mov	r0, r6
 8001278:	f7ff ff0e 	bl	8001098 <next_unwind_byte>
 800127c:	0302      	lsls	r2, r0, #12
 800127e:	f000 000f 	and.w	r0, r0, #15
 8001282:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001286:	3001      	adds	r0, #1
 8001288:	4302      	orrs	r2, r0
 800128a:	2303      	movs	r3, #3
 800128c:	e7d6      	b.n	800123c <__gnu_unwind_execute+0x14c>
 800128e:	4630      	mov	r0, r6
 8001290:	f7ff ff02 	bl	8001098 <next_unwind_byte>
 8001294:	4602      	mov	r2, r0
 8001296:	2800      	cmp	r0, #0
 8001298:	f43f af5b 	beq.w	8001152 <__gnu_unwind_execute+0x62>
 800129c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80012a0:	d0cc      	beq.n	800123c <__gnu_unwind_execute+0x14c>
 80012a2:	e756      	b.n	8001152 <__gnu_unwind_execute+0x62>
 80012a4:	f1b8 0f00 	cmp.w	r8, #0
 80012a8:	d032      	beq.n	8001310 <__gnu_unwind_execute+0x220>
 80012aa:	2000      	movs	r0, #0
 80012ac:	e752      	b.n	8001154 <__gnu_unwind_execute+0x64>
 80012ae:	4630      	mov	r0, r6
 80012b0:	f7ff fef2 	bl	8001098 <next_unwind_byte>
 80012b4:	4602      	mov	r2, r0
 80012b6:	2800      	cmp	r0, #0
 80012b8:	f43f af4b 	beq.w	8001152 <__gnu_unwind_execute+0x62>
 80012bc:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 80012c0:	f47f af47 	bne.w	8001152 <__gnu_unwind_execute+0x62>
 80012c4:	2300      	movs	r3, #0
 80012c6:	2104      	movs	r1, #4
 80012c8:	4638      	mov	r0, r7
 80012ca:	f7ff fcb7 	bl	8000c3c <_Unwind_VRS_Pop>
 80012ce:	2800      	cmp	r0, #0
 80012d0:	f43f af16 	beq.w	8001100 <__gnu_unwind_execute+0x10>
 80012d4:	e73d      	b.n	8001152 <__gnu_unwind_execute+0x62>
 80012d6:	4630      	mov	r0, r6
 80012d8:	f7ff fede 	bl	8001098 <next_unwind_byte>
 80012dc:	0302      	lsls	r2, r0, #12
 80012de:	f000 000f 	and.w	r0, r0, #15
 80012e2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80012e6:	3001      	adds	r0, #1
 80012e8:	4302      	orrs	r2, r0
 80012ea:	e7a6      	b.n	800123a <__gnu_unwind_execute+0x14a>
 80012ec:	f000 020f 	and.w	r2, r0, #15
 80012f0:	3201      	adds	r2, #1
 80012f2:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80012f6:	e7c8      	b.n	800128a <__gnu_unwind_execute+0x19a>
 80012f8:	4630      	mov	r0, r6
 80012fa:	f7ff fecd 	bl	8001098 <next_unwind_byte>
 80012fe:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001302:	f000 030f 	and.w	r3, r0, #15
 8001306:	3210      	adds	r2, #16
 8001308:	3301      	adds	r3, #1
 800130a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800130e:	e77b      	b.n	8001208 <__gnu_unwind_execute+0x118>
 8001310:	ac03      	add	r4, sp, #12
 8001312:	4643      	mov	r3, r8
 8001314:	220e      	movs	r2, #14
 8001316:	4641      	mov	r1, r8
 8001318:	9400      	str	r4, [sp, #0]
 800131a:	4638      	mov	r0, r7
 800131c:	f7ff faa8 	bl	8000870 <_Unwind_VRS_Get>
 8001320:	9400      	str	r4, [sp, #0]
 8001322:	4643      	mov	r3, r8
 8001324:	220f      	movs	r2, #15
 8001326:	4641      	mov	r1, r8
 8001328:	4638      	mov	r0, r7
 800132a:	f7ff fac7 	bl	80008bc <_Unwind_VRS_Set>
 800132e:	4640      	mov	r0, r8
 8001330:	e710      	b.n	8001154 <__gnu_unwind_execute+0x64>
 8001332:	2300      	movs	r3, #0
 8001334:	220d      	movs	r2, #13
 8001336:	4619      	mov	r1, r3
 8001338:	9500      	str	r5, [sp, #0]
 800133a:	4638      	mov	r0, r7
 800133c:	f7ff fa98 	bl	8000870 <_Unwind_VRS_Get>
 8001340:	4630      	mov	r0, r6
 8001342:	f7ff fea9 	bl	8001098 <next_unwind_byte>
 8001346:	0602      	lsls	r2, r0, #24
 8001348:	9c03      	ldr	r4, [sp, #12]
 800134a:	f04f 0902 	mov.w	r9, #2
 800134e:	d50c      	bpl.n	800136a <__gnu_unwind_execute+0x27a>
 8001350:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001354:	fa00 f009 	lsl.w	r0, r0, r9
 8001358:	4404      	add	r4, r0
 800135a:	4630      	mov	r0, r6
 800135c:	9403      	str	r4, [sp, #12]
 800135e:	f7ff fe9b 	bl	8001098 <next_unwind_byte>
 8001362:	0603      	lsls	r3, r0, #24
 8001364:	f109 0907 	add.w	r9, r9, #7
 8001368:	d4f2      	bmi.n	8001350 <__gnu_unwind_execute+0x260>
 800136a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 800136e:	fa03 f309 	lsl.w	r3, r3, r9
 8001372:	f504 7401 	add.w	r4, r4, #516	; 0x204
 8001376:	4423      	add	r3, r4
 8001378:	e71d      	b.n	80011b6 <__gnu_unwind_execute+0xc6>
 800137a:	bf00      	nop

0800137c <__gnu_unwind_frame>:
 800137c:	b510      	push	{r4, lr}
 800137e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001380:	6853      	ldr	r3, [r2, #4]
 8001382:	b084      	sub	sp, #16
 8001384:	f04f 0c03 	mov.w	ip, #3
 8001388:	3208      	adds	r2, #8
 800138a:	021c      	lsls	r4, r3, #8
 800138c:	4608      	mov	r0, r1
 800138e:	0e1b      	lsrs	r3, r3, #24
 8001390:	a901      	add	r1, sp, #4
 8001392:	9401      	str	r4, [sp, #4]
 8001394:	9202      	str	r2, [sp, #8]
 8001396:	f88d c00c 	strb.w	ip, [sp, #12]
 800139a:	f88d 300d 	strb.w	r3, [sp, #13]
 800139e:	f7ff fea7 	bl	80010f0 <__gnu_unwind_execute>
 80013a2:	b004      	add	sp, #16
 80013a4:	bd10      	pop	{r4, pc}
 80013a6:	bf00      	nop

080013a8 <_Unwind_GetRegionStart>:
 80013a8:	b508      	push	{r3, lr}
 80013aa:	f7ff fe9f 	bl	80010ec <unwind_UCB_from_context>
 80013ae:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80013b0:	bd08      	pop	{r3, pc}
 80013b2:	bf00      	nop

080013b4 <_Unwind_GetLanguageSpecificData>:
 80013b4:	b508      	push	{r3, lr}
 80013b6:	f7ff fe99 	bl	80010ec <unwind_UCB_from_context>
 80013ba:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80013bc:	79c3      	ldrb	r3, [r0, #7]
 80013be:	3302      	adds	r3, #2
 80013c0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80013c4:	bd08      	pop	{r3, pc}
 80013c6:	bf00      	nop

080013c8 <__aeabi_idiv0>:
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop

080013cc <BSP_LED_Init>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	; 0x30
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  if (Led <= LED4)
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	2b03      	cmp	r3, #3
 80013da:	d86d      	bhi.n	80014b8 <BSP_LED_Init+0xec>
  {
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = GPIO_PIN[Led];
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	4a38      	ldr	r2, [pc, #224]	; (80014c0 <BSP_LED_Init+0xf4>)
 80013e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28

    switch(Led)
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	d847      	bhi.n	8001488 <BSP_LED_Init+0xbc>
 80013f8:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <BSP_LED_Init+0x34>)
 80013fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fe:	bf00      	nop
 8001400:	08001411 	.word	0x08001411
 8001404:	0800142f 	.word	0x0800142f
 8001408:	0800144d 	.word	0x0800144d
 800140c:	0800146b 	.word	0x0800146b
    {
    case LED1 :
      LED1_GPIO_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <BSP_LED_Init+0xf8>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4a2a      	ldr	r2, [pc, #168]	; (80014c4 <BSP_LED_Init+0xf8>)
 800141a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800141e:	6313      	str	r3, [r2, #48]	; 0x30
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <BSP_LED_Init+0xf8>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001428:	61bb      	str	r3, [r7, #24]
 800142a:	69bb      	ldr	r3, [r7, #24]
      break;
 800142c:	e02d      	b.n	800148a <BSP_LED_Init+0xbe>
    case LED2 :
      LED2_GPIO_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <BSP_LED_Init+0xf8>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a23      	ldr	r2, [pc, #140]	; (80014c4 <BSP_LED_Init+0xf8>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <BSP_LED_Init+0xf8>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697b      	ldr	r3, [r7, #20]
      break;
 800144a:	e01e      	b.n	800148a <BSP_LED_Init+0xbe>
    case LED3 :
      LED3_GPIO_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <BSP_LED_Init+0xf8>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <BSP_LED_Init+0xf8>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <BSP_LED_Init+0xf8>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	693b      	ldr	r3, [r7, #16]
      break;
 8001468:	e00f      	b.n	800148a <BSP_LED_Init+0xbe>
    case LED4 :
      LED4_GPIO_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <BSP_LED_Init+0xf8>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <BSP_LED_Init+0xf8>)
 8001474:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <BSP_LED_Init+0xf8>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
      break;
 8001486:	e000      	b.n	800148a <BSP_LED_Init+0xbe>
    default :
      break;
 8001488:	bf00      	nop

    } /* end switch */

    HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <BSP_LED_Init+0xfc>)
 800148e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001492:	f107 021c 	add.w	r2, r7, #28
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f000 f9f7 	bl	800188c <HAL_GPIO_Init>

    /* By default, turn off LED by setting a high level on corresponding GPIO */
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	4a09      	ldr	r2, [pc, #36]	; (80014c8 <BSP_LED_Init+0xfc>)
 80014a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <BSP_LED_Init+0xf4>)
 80014aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	2201      	movs	r2, #1
 80014b2:	4619      	mov	r1, r3
 80014b4:	f000 fb96 	bl	8001be4 <HAL_GPIO_WritePin>

  } /* of if (Led <= LED4) */

}
 80014b8:	bf00      	nop
 80014ba:	3730      	adds	r7, #48	; 0x30
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000000 	.word	0x20000000
 80014c4:	40023800 	.word	0x40023800
 80014c8:	20000010 	.word	0x20000010

080014cc <BSP_LED_Toggle>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d80c      	bhi.n	80014f6 <BSP_LED_Toggle+0x2a>
  {
     HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4a08      	ldr	r2, [pc, #32]	; (8001500 <BSP_LED_Toggle+0x34>)
 80014e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	4907      	ldr	r1, [pc, #28]	; (8001504 <BSP_LED_Toggle+0x38>)
 80014e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	4619      	mov	r1, r3
 80014f0:	4610      	mov	r0, r2
 80014f2:	f000 fb90 	bl	8001c16 <HAL_GPIO_TogglePin>
  }
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000010 	.word	0x20000010
 8001504:	20000000 	.word	0x20000000

08001508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <SystemInit+0x60>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001512:	4a15      	ldr	r2, [pc, #84]	; (8001568 <SystemInit+0x60>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <SystemInit+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <SystemInit+0x64>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <SystemInit+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <SystemInit+0x64>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <SystemInit+0x64>)
 8001534:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800153c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <SystemInit+0x64>)
 8001540:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <SystemInit+0x68>)
 8001542:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <SystemInit+0x64>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a08      	ldr	r2, [pc, #32]	; (800156c <SystemInit+0x64>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800154e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <SystemInit+0x64>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SystemInit+0x60>)
 8001558:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800155c:	609a      	str	r2, [r3, #8]
#endif
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00
 800156c:	40023800 	.word	0x40023800
 8001570:	24003010 	.word	0x24003010

08001574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <HAL_Init+0x40>)
 800157e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001582:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <HAL_Init+0x40>)
 800158a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800158e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_Init+0x40>)
 8001596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159c:	2003      	movs	r0, #3
 800159e:	f000 f933 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a2:	200f      	movs	r0, #15
 80015a4:	f000 f810 	bl	80015c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a8:	f000 f806 	bl	80015b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023c00 	.word	0x40023c00

080015b8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_InitTick+0x54>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_InitTick+0x58>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f943 	bl	8001872 <HAL_SYSTICK_Config>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00e      	b.n	8001614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d80a      	bhi.n	8001612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f000 f90b 	bl	800181e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <HAL_InitTick+0x5c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000020 	.word	0x20000020
 8001620:	20000028 	.word	0x20000028
 8001624:	20000024 	.word	0x20000024

08001628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x20>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x24>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_IncTick+0x24>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000028 	.word	0x20000028
 800164c:	20000098 	.word	0x20000098

08001650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_GetTick+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000098 	.word	0x20000098

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4907      	ldr	r1, [pc, #28]	; (8001704 <__NVIC_EnableIRQ+0x38>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7ff ff8e 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff29 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff3e 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff8e 	bl	800175c <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5d 	bl	8001708 <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff31 	bl	80016cc <__NVIC_EnableIRQ>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffa2 	bl	80017c4 <SysTick_Config>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	e177      	b.n	8001b98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a8:	2201      	movs	r2, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8166 	bne.w	8001b92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d005      	beq.n	80018de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d130      	bne.n	8001940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	2203      	movs	r2, #3
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001914:	2201      	movs	r2, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 0201 	and.w	r2, r3, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b03      	cmp	r3, #3
 800194a:	d017      	beq.n	800197c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d123      	bne.n	80019d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	08da      	lsrs	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	08da      	lsrs	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3208      	adds	r2, #8
 80019ca:	69b9      	ldr	r1, [r7, #24]
 80019cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0203 	and.w	r2, r3, #3
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80c0 	beq.w	8001b92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b66      	ldr	r3, [pc, #408]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a65      	ldr	r2, [pc, #404]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b63      	ldr	r3, [pc, #396]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a2e:	4a61      	ldr	r2, [pc, #388]	; (8001bb4 <HAL_GPIO_Init+0x328>)
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	3302      	adds	r3, #2
 8001a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a58      	ldr	r2, [pc, #352]	; (8001bb8 <HAL_GPIO_Init+0x32c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d037      	beq.n	8001aca <HAL_GPIO_Init+0x23e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a57      	ldr	r2, [pc, #348]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d031      	beq.n	8001ac6 <HAL_GPIO_Init+0x23a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a56      	ldr	r2, [pc, #344]	; (8001bc0 <HAL_GPIO_Init+0x334>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d02b      	beq.n	8001ac2 <HAL_GPIO_Init+0x236>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a55      	ldr	r2, [pc, #340]	; (8001bc4 <HAL_GPIO_Init+0x338>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d025      	beq.n	8001abe <HAL_GPIO_Init+0x232>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a54      	ldr	r2, [pc, #336]	; (8001bc8 <HAL_GPIO_Init+0x33c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d01f      	beq.n	8001aba <HAL_GPIO_Init+0x22e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a53      	ldr	r2, [pc, #332]	; (8001bcc <HAL_GPIO_Init+0x340>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d019      	beq.n	8001ab6 <HAL_GPIO_Init+0x22a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a52      	ldr	r2, [pc, #328]	; (8001bd0 <HAL_GPIO_Init+0x344>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d013      	beq.n	8001ab2 <HAL_GPIO_Init+0x226>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a51      	ldr	r2, [pc, #324]	; (8001bd4 <HAL_GPIO_Init+0x348>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00d      	beq.n	8001aae <HAL_GPIO_Init+0x222>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a50      	ldr	r2, [pc, #320]	; (8001bd8 <HAL_GPIO_Init+0x34c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d007      	beq.n	8001aaa <HAL_GPIO_Init+0x21e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4f      	ldr	r2, [pc, #316]	; (8001bdc <HAL_GPIO_Init+0x350>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <HAL_GPIO_Init+0x21a>
 8001aa2:	2309      	movs	r3, #9
 8001aa4:	e012      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001aa6:	230a      	movs	r3, #10
 8001aa8:	e010      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001aaa:	2308      	movs	r3, #8
 8001aac:	e00e      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001aae:	2307      	movs	r3, #7
 8001ab0:	e00c      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001ab2:	2306      	movs	r3, #6
 8001ab4:	e00a      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001ab6:	2305      	movs	r3, #5
 8001ab8:	e008      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001aba:	2304      	movs	r3, #4
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e004      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001aca:	2300      	movs	r3, #0
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	f002 0203 	and.w	r2, r2, #3
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	4093      	lsls	r3, r2
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001adc:	4935      	ldr	r1, [pc, #212]	; (8001bb4 <HAL_GPIO_Init+0x328>)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aea:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <HAL_GPIO_Init+0x354>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b0e:	4a34      	ldr	r2, [pc, #208]	; (8001be0 <HAL_GPIO_Init+0x354>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b14:	4b32      	ldr	r3, [pc, #200]	; (8001be0 <HAL_GPIO_Init+0x354>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b38:	4a29      	ldr	r2, [pc, #164]	; (8001be0 <HAL_GPIO_Init+0x354>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b3e:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <HAL_GPIO_Init+0x354>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b62:	4a1f      	ldr	r2, [pc, #124]	; (8001be0 <HAL_GPIO_Init+0x354>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_GPIO_Init+0x354>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <HAL_GPIO_Init+0x354>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b0f      	cmp	r3, #15
 8001b9c:	f67f ae84 	bls.w	80018a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3724      	adds	r7, #36	; 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40013800 	.word	0x40013800
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40020c00 	.word	0x40020c00
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40021400 	.word	0x40021400
 8001bd0:	40021800 	.word	0x40021800
 8001bd4:	40021c00 	.word	0x40021c00
 8001bd8:	40022000 	.word	0x40022000
 8001bdc:	40022400 	.word	0x40022400
 8001be0:	40013c00 	.word	0x40013c00

08001be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf4:	787b      	ldrb	r3, [r7, #1]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfa:	887a      	ldrh	r2, [r7, #2]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c00:	e003      	b.n	8001c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	041a      	lsls	r2, r3, #16
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	619a      	str	r2, [r3, #24]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b085      	sub	sp, #20
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c28:	887a      	ldrh	r2, [r7, #2]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	041a      	lsls	r2, r3, #16
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	887b      	ldrh	r3, [r7, #2]
 8001c36:	400b      	ands	r3, r1
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	619a      	str	r2, [r3, #24]
}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c58:	695a      	ldr	r2, [r3, #20]
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d006      	beq.n	8001c70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 fda7 	bl	80027be <HAL_GPIO_EXTI_Callback>
  }
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40013c00 	.word	0x40013c00

08001c7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_PWREx_EnableOverDrive+0x90>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a1f      	ldr	r2, [pc, #124]	; (8001d0c <HAL_PWREx_EnableOverDrive+0x90>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <HAL_PWREx_EnableOverDrive+0x90>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <HAL_PWREx_EnableOverDrive+0x94>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ca8:	f7ff fcd2 	bl	8001650 <HAL_GetTick>
 8001cac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cae:	e009      	b.n	8001cc4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cb0:	f7ff fcce 	bl	8001650 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cbe:	d901      	bls.n	8001cc4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e01f      	b.n	8001d04 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cc4:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd0:	d1ee      	bne.n	8001cb0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cd8:	f7ff fcba 	bl	8001650 <HAL_GetTick>
 8001cdc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cde:	e009      	b.n	8001cf4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ce0:	f7ff fcb6 	bl	8001650 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cee:	d901      	bls.n	8001cf4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e007      	b.n	8001d04 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cf4:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d00:	d1ee      	bne.n	8001ce0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	420e0040 	.word	0x420e0040
 8001d14:	40007000 	.word	0x40007000
 8001d18:	420e0044 	.word	0x420e0044

08001d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0cc      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d30:	4b68      	ldr	r3, [pc, #416]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 030f 	and.w	r3, r3, #15
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d90c      	bls.n	8001d58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	4b65      	ldr	r3, [pc, #404]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d46:	4b63      	ldr	r3, [pc, #396]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0b8      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d020      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d70:	4b59      	ldr	r3, [pc, #356]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	4a58      	ldr	r2, [pc, #352]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d88:	4b53      	ldr	r3, [pc, #332]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4a52      	ldr	r2, [pc, #328]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d94:	4b50      	ldr	r3, [pc, #320]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	494d      	ldr	r1, [pc, #308]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d044      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d107      	bne.n	8001dca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dba:	4b47      	ldr	r3, [pc, #284]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d119      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e07f      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d003      	beq.n	8001dda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dda:	4b3f      	ldr	r3, [pc, #252]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d109      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e06f      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dea:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e067      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dfa:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f023 0203 	bic.w	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4934      	ldr	r1, [pc, #208]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e0c:	f7ff fc20 	bl	8001650 <HAL_GetTick>
 8001e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	e00a      	b.n	8001e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e14:	f7ff fc1c 	bl	8001650 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e04f      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 020c 	and.w	r2, r3, #12
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d1eb      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e3c:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d20c      	bcs.n	8001e64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4a:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e032      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4916      	ldr	r1, [pc, #88]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d009      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e8e:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	490e      	ldr	r1, [pc, #56]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ea2:	f000 f821 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	490a      	ldr	r1, [pc, #40]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	5ccb      	ldrb	r3, [r1, r3]
 8001eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eba:	4a09      	ldr	r2, [pc, #36]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fb80 	bl	80015c8 <HAL_InitTick>

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023c00 	.word	0x40023c00
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	080029a8 	.word	0x080029a8
 8001ee0:	20000020 	.word	0x20000020
 8001ee4:	20000024 	.word	0x20000024

08001ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eec:	b094      	sub	sp, #80	; 0x50
 8001eee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ef8:	2300      	movs	r3, #0
 8001efa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f00:	4b79      	ldr	r3, [pc, #484]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d00d      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x40>
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	f200 80e1 	bhi.w	80020d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x34>
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d003      	beq.n	8001f22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f1a:	e0db      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f1c:	4b73      	ldr	r3, [pc, #460]	; (80020ec <HAL_RCC_GetSysClockFreq+0x204>)
 8001f1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f20:	e0db      	b.n	80020da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f22:	4b73      	ldr	r3, [pc, #460]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f26:	e0d8      	b.n	80020da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f28:	4b6f      	ldr	r3, [pc, #444]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f32:	4b6d      	ldr	r3, [pc, #436]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d063      	beq.n	8002006 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f3e:	4b6a      	ldr	r3, [pc, #424]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	099b      	lsrs	r3, r3, #6
 8001f44:	2200      	movs	r2, #0
 8001f46:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f50:	633b      	str	r3, [r7, #48]	; 0x30
 8001f52:	2300      	movs	r3, #0
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
 8001f56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f5a:	4622      	mov	r2, r4
 8001f5c:	462b      	mov	r3, r5
 8001f5e:	f04f 0000 	mov.w	r0, #0
 8001f62:	f04f 0100 	mov.w	r1, #0
 8001f66:	0159      	lsls	r1, r3, #5
 8001f68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f6c:	0150      	lsls	r0, r2, #5
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4621      	mov	r1, r4
 8001f74:	1a51      	subs	r1, r2, r1
 8001f76:	6139      	str	r1, [r7, #16]
 8001f78:	4629      	mov	r1, r5
 8001f7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f8c:	4659      	mov	r1, fp
 8001f8e:	018b      	lsls	r3, r1, #6
 8001f90:	4651      	mov	r1, sl
 8001f92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f96:	4651      	mov	r1, sl
 8001f98:	018a      	lsls	r2, r1, #6
 8001f9a:	4651      	mov	r1, sl
 8001f9c:	ebb2 0801 	subs.w	r8, r2, r1
 8001fa0:	4659      	mov	r1, fp
 8001fa2:	eb63 0901 	sbc.w	r9, r3, r1
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fba:	4690      	mov	r8, r2
 8001fbc:	4699      	mov	r9, r3
 8001fbe:	4623      	mov	r3, r4
 8001fc0:	eb18 0303 	adds.w	r3, r8, r3
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	462b      	mov	r3, r5
 8001fc8:	eb49 0303 	adc.w	r3, r9, r3
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fda:	4629      	mov	r1, r5
 8001fdc:	024b      	lsls	r3, r1, #9
 8001fde:	4621      	mov	r1, r4
 8001fe0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fe4:	4621      	mov	r1, r4
 8001fe6:	024a      	lsls	r2, r1, #9
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fee:	2200      	movs	r2, #0
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ff4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ff8:	f7fe f8fc 	bl	80001f4 <__aeabi_uldivmod>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4613      	mov	r3, r2
 8002002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002004:	e058      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002006:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	099b      	lsrs	r3, r3, #6
 800200c:	2200      	movs	r2, #0
 800200e:	4618      	mov	r0, r3
 8002010:	4611      	mov	r1, r2
 8002012:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002016:	623b      	str	r3, [r7, #32]
 8002018:	2300      	movs	r3, #0
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
 800201c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002020:	4642      	mov	r2, r8
 8002022:	464b      	mov	r3, r9
 8002024:	f04f 0000 	mov.w	r0, #0
 8002028:	f04f 0100 	mov.w	r1, #0
 800202c:	0159      	lsls	r1, r3, #5
 800202e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002032:	0150      	lsls	r0, r2, #5
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4641      	mov	r1, r8
 800203a:	ebb2 0a01 	subs.w	sl, r2, r1
 800203e:	4649      	mov	r1, r9
 8002040:	eb63 0b01 	sbc.w	fp, r3, r1
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002050:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002054:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002058:	ebb2 040a 	subs.w	r4, r2, sl
 800205c:	eb63 050b 	sbc.w	r5, r3, fp
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	00eb      	lsls	r3, r5, #3
 800206a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800206e:	00e2      	lsls	r2, r4, #3
 8002070:	4614      	mov	r4, r2
 8002072:	461d      	mov	r5, r3
 8002074:	4643      	mov	r3, r8
 8002076:	18e3      	adds	r3, r4, r3
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	464b      	mov	r3, r9
 800207c:	eb45 0303 	adc.w	r3, r5, r3
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800208e:	4629      	mov	r1, r5
 8002090:	028b      	lsls	r3, r1, #10
 8002092:	4621      	mov	r1, r4
 8002094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002098:	4621      	mov	r1, r4
 800209a:	028a      	lsls	r2, r1, #10
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a2:	2200      	movs	r2, #0
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	61fa      	str	r2, [r7, #28]
 80020a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020ac:	f7fe f8a2 	bl	80001f4 <__aeabi_uldivmod>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4613      	mov	r3, r2
 80020b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	0c1b      	lsrs	r3, r3, #16
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	3301      	adds	r3, #1
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80020c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020d2:	e002      	b.n	80020da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_RCC_GetSysClockFreq+0x204>)
 80020d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3750      	adds	r7, #80	; 0x50
 80020e0:	46bd      	mov	sp, r7
 80020e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	00f42400 	.word	0x00f42400
 80020f0:	007a1200 	.word	0x007a1200

080020f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e273      	b.n	80025ee <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d075      	beq.n	80021fe <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002112:	4b88      	ldr	r3, [pc, #544]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b04      	cmp	r3, #4
 800211c:	d00c      	beq.n	8002138 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800211e:	4b85      	ldr	r3, [pc, #532]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002126:	2b08      	cmp	r3, #8
 8002128:	d112      	bne.n	8002150 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800212a:	4b82      	ldr	r3, [pc, #520]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002136:	d10b      	bne.n	8002150 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002138:	4b7e      	ldr	r3, [pc, #504]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d05b      	beq.n	80021fc <HAL_RCC_OscConfig+0x108>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d157      	bne.n	80021fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e24e      	b.n	80025ee <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002158:	d106      	bne.n	8002168 <HAL_RCC_OscConfig+0x74>
 800215a:	4b76      	ldr	r3, [pc, #472]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a75      	ldr	r2, [pc, #468]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e01d      	b.n	80021a4 <HAL_RCC_OscConfig+0xb0>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x98>
 8002172:	4b70      	ldr	r3, [pc, #448]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a6f      	ldr	r2, [pc, #444]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b6d      	ldr	r3, [pc, #436]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a6c      	ldr	r2, [pc, #432]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0xb0>
 800218c:	4b69      	ldr	r3, [pc, #420]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a68      	ldr	r2, [pc, #416]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 8002192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b66      	ldr	r3, [pc, #408]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a65      	ldr	r2, [pc, #404]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 800219e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7ff fa50 	bl	8001650 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b4:	f7ff fa4c 	bl	8001650 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e213      	b.n	80025ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b5b      	ldr	r3, [pc, #364]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0xc0>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7ff fa3c 	bl	8001650 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff fa38 	bl	8001650 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e1ff      	b.n	80025ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	4b51      	ldr	r3, [pc, #324]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0xe8>
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d063      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800220a:	4b4a      	ldr	r3, [pc, #296]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002216:	4b47      	ldr	r3, [pc, #284]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800221e:	2b08      	cmp	r3, #8
 8002220:	d11c      	bne.n	800225c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002222:	4b44      	ldr	r3, [pc, #272]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d116      	bne.n	800225c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	4b41      	ldr	r3, [pc, #260]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x152>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d001      	beq.n	8002246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e1d3      	b.n	80025ee <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4937      	ldr	r1, [pc, #220]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	e03a      	b.n	80022d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d020      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002264:	4b34      	ldr	r3, [pc, #208]	; (8002338 <HAL_RCC_OscConfig+0x244>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226a:	f7ff f9f1 	bl	8001650 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002272:	f7ff f9ed 	bl	8001650 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e1b4      	b.n	80025ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002290:	4b28      	ldr	r3, [pc, #160]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4925      	ldr	r1, [pc, #148]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]
 80022a4:	e015      	b.n	80022d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a6:	4b24      	ldr	r3, [pc, #144]	; (8002338 <HAL_RCC_OscConfig+0x244>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7ff f9d0 	bl	8001650 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b4:	f7ff f9cc 	bl	8001650 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e193      	b.n	80025ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d036      	beq.n	800234c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d016      	beq.n	8002314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <HAL_RCC_OscConfig+0x248>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ec:	f7ff f9b0 	bl	8001650 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f4:	f7ff f9ac 	bl	8001650 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e173      	b.n	80025ee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_RCC_OscConfig+0x240>)
 8002308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x200>
 8002312:	e01b      	b.n	800234c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RCC_OscConfig+0x248>)
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231a:	f7ff f999 	bl	8001650 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002320:	e00e      	b.n	8002340 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002322:	f7ff f995 	bl	8001650 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d907      	bls.n	8002340 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e15c      	b.n	80025ee <HAL_RCC_OscConfig+0x4fa>
 8002334:	40023800 	.word	0x40023800
 8002338:	42470000 	.word	0x42470000
 800233c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002340:	4b8a      	ldr	r3, [pc, #552]	; (800256c <HAL_RCC_OscConfig+0x478>)
 8002342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1ea      	bne.n	8002322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 8097 	beq.w	8002488 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235e:	4b83      	ldr	r3, [pc, #524]	; (800256c <HAL_RCC_OscConfig+0x478>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10f      	bne.n	800238a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	4b7f      	ldr	r3, [pc, #508]	; (800256c <HAL_RCC_OscConfig+0x478>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	4a7e      	ldr	r2, [pc, #504]	; (800256c <HAL_RCC_OscConfig+0x478>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002378:	6413      	str	r3, [r2, #64]	; 0x40
 800237a:	4b7c      	ldr	r3, [pc, #496]	; (800256c <HAL_RCC_OscConfig+0x478>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002386:	2301      	movs	r3, #1
 8002388:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238a:	4b79      	ldr	r3, [pc, #484]	; (8002570 <HAL_RCC_OscConfig+0x47c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d118      	bne.n	80023c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002396:	4b76      	ldr	r3, [pc, #472]	; (8002570 <HAL_RCC_OscConfig+0x47c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a75      	ldr	r2, [pc, #468]	; (8002570 <HAL_RCC_OscConfig+0x47c>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a2:	f7ff f955 	bl	8001650 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023aa:	f7ff f951 	bl	8001650 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e118      	b.n	80025ee <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	4b6c      	ldr	r3, [pc, #432]	; (8002570 <HAL_RCC_OscConfig+0x47c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x2ea>
 80023d0:	4b66      	ldr	r3, [pc, #408]	; (800256c <HAL_RCC_OscConfig+0x478>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	4a65      	ldr	r2, [pc, #404]	; (800256c <HAL_RCC_OscConfig+0x478>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6713      	str	r3, [r2, #112]	; 0x70
 80023dc:	e01c      	b.n	8002418 <HAL_RCC_OscConfig+0x324>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x30c>
 80023e6:	4b61      	ldr	r3, [pc, #388]	; (800256c <HAL_RCC_OscConfig+0x478>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ea:	4a60      	ldr	r2, [pc, #384]	; (800256c <HAL_RCC_OscConfig+0x478>)
 80023ec:	f043 0304 	orr.w	r3, r3, #4
 80023f0:	6713      	str	r3, [r2, #112]	; 0x70
 80023f2:	4b5e      	ldr	r3, [pc, #376]	; (800256c <HAL_RCC_OscConfig+0x478>)
 80023f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f6:	4a5d      	ldr	r2, [pc, #372]	; (800256c <HAL_RCC_OscConfig+0x478>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6713      	str	r3, [r2, #112]	; 0x70
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0x324>
 8002400:	4b5a      	ldr	r3, [pc, #360]	; (800256c <HAL_RCC_OscConfig+0x478>)
 8002402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002404:	4a59      	ldr	r2, [pc, #356]	; (800256c <HAL_RCC_OscConfig+0x478>)
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	6713      	str	r3, [r2, #112]	; 0x70
 800240c:	4b57      	ldr	r3, [pc, #348]	; (800256c <HAL_RCC_OscConfig+0x478>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	4a56      	ldr	r2, [pc, #344]	; (800256c <HAL_RCC_OscConfig+0x478>)
 8002412:	f023 0304 	bic.w	r3, r3, #4
 8002416:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d015      	beq.n	800244c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002420:	f7ff f916 	bl	8001650 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002426:	e00a      	b.n	800243e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002428:	f7ff f912 	bl	8001650 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	; 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e0d7      	b.n	80025ee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243e:	4b4b      	ldr	r3, [pc, #300]	; (800256c <HAL_RCC_OscConfig+0x478>)
 8002440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0ee      	beq.n	8002428 <HAL_RCC_OscConfig+0x334>
 800244a:	e014      	b.n	8002476 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244c:	f7ff f900 	bl	8001650 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002452:	e00a      	b.n	800246a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002454:	f7ff f8fc 	bl	8001650 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e0c1      	b.n	80025ee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246a:	4b40      	ldr	r3, [pc, #256]	; (800256c <HAL_RCC_OscConfig+0x478>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1ee      	bne.n	8002454 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002476:	7dfb      	ldrb	r3, [r7, #23]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d105      	bne.n	8002488 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247c:	4b3b      	ldr	r3, [pc, #236]	; (800256c <HAL_RCC_OscConfig+0x478>)
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	4a3a      	ldr	r2, [pc, #232]	; (800256c <HAL_RCC_OscConfig+0x478>)
 8002482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002486:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80ad 	beq.w	80025ec <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002492:	4b36      	ldr	r3, [pc, #216]	; (800256c <HAL_RCC_OscConfig+0x478>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b08      	cmp	r3, #8
 800249c:	d060      	beq.n	8002560 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d145      	bne.n	8002532 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a6:	4b33      	ldr	r3, [pc, #204]	; (8002574 <HAL_RCC_OscConfig+0x480>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7ff f8d0 	bl	8001650 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b4:	f7ff f8cc 	bl	8001650 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e093      	b.n	80025ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c6:	4b29      	ldr	r3, [pc, #164]	; (800256c <HAL_RCC_OscConfig+0x478>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69da      	ldr	r2, [r3, #28]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	019b      	lsls	r3, r3, #6
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	085b      	lsrs	r3, r3, #1
 80024ea:	3b01      	subs	r3, #1
 80024ec:	041b      	lsls	r3, r3, #16
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	061b      	lsls	r3, r3, #24
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	071b      	lsls	r3, r3, #28
 80024fe:	491b      	ldr	r1, [pc, #108]	; (800256c <HAL_RCC_OscConfig+0x478>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_RCC_OscConfig+0x480>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250a:	f7ff f8a1 	bl	8001650 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002512:	f7ff f89d 	bl	8001650 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e064      	b.n	80025ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_RCC_OscConfig+0x478>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x41e>
 8002530:	e05c      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <HAL_RCC_OscConfig+0x480>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7ff f88a 	bl	8001650 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002540:	f7ff f886 	bl	8001650 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e04d      	b.n	80025ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_RCC_OscConfig+0x478>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x44c>
 800255e:	e045      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d107      	bne.n	8002578 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e040      	b.n	80025ee <HAL_RCC_OscConfig+0x4fa>
 800256c:	40023800 	.word	0x40023800
 8002570:	40007000 	.word	0x40007000
 8002574:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002578:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d030      	beq.n	80025e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d129      	bne.n	80025e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d122      	bne.n	80025e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025a8:	4013      	ands	r3, r2
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d119      	bne.n	80025e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	085b      	lsrs	r3, r3, #1
 80025c0:	3b01      	subs	r3, #1
 80025c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d10f      	bne.n	80025e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d107      	bne.n	80025e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800

080025fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002634 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002600:	480d      	ldr	r0, [pc, #52]	; (8002638 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002602:	490e      	ldr	r1, [pc, #56]	; (800263c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002604:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002608:	e002      	b.n	8002610 <LoopCopyDataInit>

0800260a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800260c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260e:	3304      	adds	r3, #4

08002610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002614:	d3f9      	bcc.n	800260a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002616:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002618:	4c0b      	ldr	r4, [pc, #44]	; (8002648 <LoopFillZerobss+0x26>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800261c:	e001      	b.n	8002622 <LoopFillZerobss>

0800261e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002620:	3204      	adds	r2, #4

08002622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002624:	d3fb      	bcc.n	800261e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002626:	f7fe ff6f 	bl	8001508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262a:	f000 f933 	bl	8002894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262e:	f000 f8bb 	bl	80027a8 <main>
  bx  lr    
 8002632:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002634:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800263c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002640:	08002ae4 	.word	0x08002ae4
  ldr r2, =_sbss
 8002644:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002648:	200001d8 	.word	0x200001d8

0800264c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC_IRQHandler>
	...

08002650 <_ZN12ClockManager9ConfigureEv>:
public:
    /**
     * @brief Configures the system clock.
     * @note Sets up the clock source, voltage scaling, PLL, and flash latency.
     */
    static void Configure() {
 8002650:	b580      	push	{r7, lr}
 8002652:	b096      	sub	sp, #88	; 0x58
 8002654:	af00      	add	r7, sp, #0
        RCC_ClkInitTypeDef RCC_ClkInitStruct;
        RCC_OscInitTypeDef RCC_OscInitStruct;
        HAL_StatusTypeDef ret = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        __HAL_RCC_PWR_CLK_ENABLE();
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	4b31      	ldr	r3, [pc, #196]	; (8002728 <_ZN12ClockManager9ConfigureEv+0xd8>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	4a30      	ldr	r2, [pc, #192]	; (8002728 <_ZN12ClockManager9ConfigureEv+0xd8>)
 8002666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266a:	6413      	str	r3, [r2, #64]	; 0x40
 800266c:	4b2e      	ldr	r3, [pc, #184]	; (8002728 <_ZN12ClockManager9ConfigureEv+0xd8>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]
        __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002678:	2300      	movs	r3, #0
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	4b2b      	ldr	r3, [pc, #172]	; (800272c <_ZN12ClockManager9ConfigureEv+0xdc>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a2a      	ldr	r2, [pc, #168]	; (800272c <_ZN12ClockManager9ConfigureEv+0xdc>)
 8002682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b28      	ldr	r3, [pc, #160]	; (800272c <_ZN12ClockManager9ConfigureEv+0xdc>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	687b      	ldr	r3, [r7, #4]

        RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002694:	2301      	movs	r3, #1
 8002696:	60fb      	str	r3, [r7, #12]
        RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800269c:	613b      	str	r3, [r7, #16]
        RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800269e:	2302      	movs	r3, #2
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
        RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(USE_STM32469I_DISCO_REVA)
        RCC_OscInitStruct.PLL.PLLM = 25;
#else
        RCC_OscInitStruct.PLL.PLLM = 8;
 80026a8:	2308      	movs	r3, #8
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
        RCC_OscInitStruct.PLL.PLLN = 360;
 80026ac:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
        RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026b2:	2302      	movs	r3, #2
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
        RCC_OscInitStruct.PLL.PLLQ = 7;
 80026b6:	2307      	movs	r3, #7
 80026b8:	63bb      	str	r3, [r7, #56]	; 0x38
        RCC_OscInitStruct.PLL.PLLR = 6;
 80026ba:	2306      	movs	r3, #6
 80026bc:	63fb      	str	r3, [r7, #60]	; 0x3c

        ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80026be:	f107 030c 	add.w	r3, r7, #12
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fd16 	bl	80020f4 <HAL_RCC_OscConfig>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if(ret != HAL_OK) { while(1) {} }
 80026ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d000      	beq.n	80026d8 <_ZN12ClockManager9ConfigureEv+0x88>
 80026d6:	e7fe      	b.n	80026d6 <_ZN12ClockManager9ConfigureEv+0x86>

        ret = HAL_PWREx_EnableOverDrive();
 80026d8:	f7ff fad0 	bl	8001c7c <HAL_PWREx_EnableOverDrive>
 80026dc:	4603      	mov	r3, r0
 80026de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if(ret != HAL_OK) { while(1) {} }
 80026e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d000      	beq.n	80026ec <_ZN12ClockManager9ConfigureEv+0x9c>
 80026ea:	e7fe      	b.n	80026ea <_ZN12ClockManager9ConfigureEv+0x9a>

        RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80026ec:	230f      	movs	r3, #15
 80026ee:	643b      	str	r3, [r7, #64]	; 0x40
        RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026f0:	2302      	movs	r3, #2
 80026f2:	647b      	str	r3, [r7, #68]	; 0x44
        RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026f4:	2300      	movs	r3, #0
 80026f6:	64bb      	str	r3, [r7, #72]	; 0x48
        RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026fc:	64fb      	str	r3, [r7, #76]	; 0x4c
        RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002702:	653b      	str	r3, [r7, #80]	; 0x50

        ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002704:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002708:	2105      	movs	r1, #5
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fb06 	bl	8001d1c <HAL_RCC_ClockConfig>
 8002710:	4603      	mov	r3, r0
 8002712:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if(ret != HAL_OK) { while(1) {} }
 8002716:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800271a:	2b00      	cmp	r3, #0
 800271c:	d000      	beq.n	8002720 <_ZN12ClockManager9ConfigureEv+0xd0>
 800271e:	e7fe      	b.n	800271e <_ZN12ClockManager9ConfigureEv+0xce>
    }
 8002720:	bf00      	nop
 8002722:	3758      	adds	r7, #88	; 0x58
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40023800 	.word	0x40023800
 800272c:	40007000 	.word	0x40007000

08002730 <_ZN12IndicatorLED10InitializeEv>:
class IndicatorLED {
public:
    /**
     * @brief Initializes LED1.
     */
    static void Initialize() {
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
        BSP_LED_Init(LED1);
 8002734:	2000      	movs	r0, #0
 8002736:	f7fe fe49 	bl	80013cc <BSP_LED_Init>
    }
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}

0800273e <_ZN12IndicatorLED11ToggleStateEv>:

    /**
     * @brief Toggles LED1 state.
     */
    static void ToggleState() {
 800273e:	b580      	push	{r7, lr}
 8002740:	af00      	add	r7, sp, #0
        BSP_LED_Toggle(LED1);
 8002742:	2000      	movs	r0, #0
 8002744:	f7fe fec2 	bl	80014cc <BSP_LED_Toggle>
    }
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}

0800274c <_ZN16InterruptManager9ConfigureEv>:
public:
    /**
     * @brief Configures EXTI line 0 (connected to PA.00 pin) in interrupt mode.
     * @note Initializes GPIOA and configures the EXTI line for interrupt on rising edge.
     */
    static void Configure() {
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
        GPIO_InitTypeDef GPIO_InitStructure;

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <_ZN16InterruptManager9ConfigureEv+0x54>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a11      	ldr	r2, [pc, #68]	; (80027a0 <_ZN16InterruptManager9ConfigureEv+0x54>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <_ZN16InterruptManager9ConfigureEv+0x54>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	683b      	ldr	r3, [r7, #0]

        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800276e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002772:	60bb      	str	r3, [r7, #8]
        GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
        GPIO_InitStructure.Pin = GPIO_PIN_0;
 8002778:	2301      	movs	r3, #1
 800277a:	607b      	str	r3, [r7, #4]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	4619      	mov	r1, r3
 8002780:	4808      	ldr	r0, [pc, #32]	; (80027a4 <_ZN16InterruptManager9ConfigureEv+0x58>)
 8002782:	f7ff f883 	bl	800188c <HAL_GPIO_Init>

        HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8002786:	2200      	movs	r2, #0
 8002788:	2102      	movs	r1, #2
 800278a:	2006      	movs	r0, #6
 800278c:	f7ff f847 	bl	800181e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002790:	2006      	movs	r0, #6
 8002792:	f7ff f860 	bl	8001856 <HAL_NVIC_EnableIRQ>
    }
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40020000 	.word	0x40020000

080027a8 <main>:

/**
 * @brief Main program entry point.
 * @note Initializes the system and enters an infinite loop.
 */
int main() {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
    HAL_Init(); // Initialize HAL library
 80027ac:	f7fe fee2 	bl	8001574 <HAL_Init>
    ClockManager::Configure(); // Configure system clock
 80027b0:	f7ff ff4e 	bl	8002650 <_ZN12ClockManager9ConfigureEv>
    IndicatorLED::Initialize(); // Initialize LED
 80027b4:	f7ff ffbc 	bl	8002730 <_ZN12IndicatorLED10InitializeEv>
    InterruptManager::Configure(); // Configure external interrupt
 80027b8:	f7ff ffc8 	bl	800274c <_ZN16InterruptManager9ConfigureEv>

    while (1) {} // Infinite loop
 80027bc:	e7fe      	b.n	80027bc <main+0x14>

080027be <HAL_GPIO_EXTI_Callback>:
/**
 * @brief Callback function for EXTI line detection.
 * @note Toggles the LED when EXTI line 0 is triggered.
 * @param GPIO_Pin Specifies the pins connected to the EXTI line.
 */
extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {
 80027c8:	88fb      	ldrh	r3, [r7, #6]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_GPIO_EXTI_Callback+0x14>
        IndicatorLED::ToggleState();
 80027ce:	f7ff ffb6 	bl	800273e <_ZN12IndicatorLED11ToggleStateEv>
    }
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0
}
 80027de:	bf00      	nop
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <HardFault_Handler+0x4>

080027ee <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80027f2:	e7fe      	b.n	80027f2 <MemManage_Handler+0x4>

080027f4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <BusFault_Handler+0x4>

080027fa <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80027fe:	e7fe      	b.n	80027fe <UsageFault_Handler+0x4>

08002800 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0
}
 8002812:	bf00      	nop
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800282e:	f7fe fefb 	bl	8001628 <HAL_IncTick>
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}

08002836 <EXTI0_IRQHandler>:
  * @brief  This function handles external line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 800283a:	2001      	movs	r0, #1
 800283c:	f7ff fa06 	bl	8001c4c <HAL_GPIO_EXTI_IRQHandler>
}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}

08002844 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return 1;
 8002848:	2301      	movs	r3, #1
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <_kill>:

int _kill(int pid, int sig)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800285e:	f000 f813 	bl	8002888 <__errno>
 8002862:	4603      	mov	r3, r0
 8002864:	2216      	movs	r2, #22
 8002866:	601a      	str	r2, [r3, #0]
  return -1;
 8002868:	f04f 33ff 	mov.w	r3, #4294967295
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <_exit>:

void _exit (int status)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800287c:	f04f 31ff 	mov.w	r1, #4294967295
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ffe7 	bl	8002854 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002886:	e7fe      	b.n	8002886 <_exit+0x12>

08002888 <__errno>:
 8002888:	4b01      	ldr	r3, [pc, #4]	; (8002890 <__errno+0x8>)
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	20000078 	.word	0x20000078

08002894 <__libc_init_array>:
 8002894:	b570      	push	{r4, r5, r6, lr}
 8002896:	4d0d      	ldr	r5, [pc, #52]	; (80028cc <__libc_init_array+0x38>)
 8002898:	4c0d      	ldr	r4, [pc, #52]	; (80028d0 <__libc_init_array+0x3c>)
 800289a:	1b64      	subs	r4, r4, r5
 800289c:	10a4      	asrs	r4, r4, #2
 800289e:	2600      	movs	r6, #0
 80028a0:	42a6      	cmp	r6, r4
 80028a2:	d109      	bne.n	80028b8 <__libc_init_array+0x24>
 80028a4:	4d0b      	ldr	r5, [pc, #44]	; (80028d4 <__libc_init_array+0x40>)
 80028a6:	4c0c      	ldr	r4, [pc, #48]	; (80028d8 <__libc_init_array+0x44>)
 80028a8:	f000 f872 	bl	8002990 <_init>
 80028ac:	1b64      	subs	r4, r4, r5
 80028ae:	10a4      	asrs	r4, r4, #2
 80028b0:	2600      	movs	r6, #0
 80028b2:	42a6      	cmp	r6, r4
 80028b4:	d105      	bne.n	80028c2 <__libc_init_array+0x2e>
 80028b6:	bd70      	pop	{r4, r5, r6, pc}
 80028b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028bc:	4798      	blx	r3
 80028be:	3601      	adds	r6, #1
 80028c0:	e7ee      	b.n	80028a0 <__libc_init_array+0xc>
 80028c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c6:	4798      	blx	r3
 80028c8:	3601      	adds	r6, #1
 80028ca:	e7f2      	b.n	80028b2 <__libc_init_array+0x1e>
 80028cc:	08002adc 	.word	0x08002adc
 80028d0:	08002adc 	.word	0x08002adc
 80028d4:	08002adc 	.word	0x08002adc
 80028d8:	08002ae0 	.word	0x08002ae0

080028dc <abort>:
 80028dc:	b508      	push	{r3, lr}
 80028de:	2006      	movs	r0, #6
 80028e0:	f000 f82c 	bl	800293c <raise>
 80028e4:	2001      	movs	r0, #1
 80028e6:	f7ff ffc5 	bl	8002874 <_exit>

080028ea <_raise_r>:
 80028ea:	291f      	cmp	r1, #31
 80028ec:	b538      	push	{r3, r4, r5, lr}
 80028ee:	4604      	mov	r4, r0
 80028f0:	460d      	mov	r5, r1
 80028f2:	d904      	bls.n	80028fe <_raise_r+0x14>
 80028f4:	2316      	movs	r3, #22
 80028f6:	6003      	str	r3, [r0, #0]
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295
 80028fc:	bd38      	pop	{r3, r4, r5, pc}
 80028fe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002900:	b112      	cbz	r2, 8002908 <_raise_r+0x1e>
 8002902:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002906:	b94b      	cbnz	r3, 800291c <_raise_r+0x32>
 8002908:	4620      	mov	r0, r4
 800290a:	f000 f831 	bl	8002970 <_getpid_r>
 800290e:	462a      	mov	r2, r5
 8002910:	4601      	mov	r1, r0
 8002912:	4620      	mov	r0, r4
 8002914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002918:	f000 b818 	b.w	800294c <_kill_r>
 800291c:	2b01      	cmp	r3, #1
 800291e:	d00a      	beq.n	8002936 <_raise_r+0x4c>
 8002920:	1c59      	adds	r1, r3, #1
 8002922:	d103      	bne.n	800292c <_raise_r+0x42>
 8002924:	2316      	movs	r3, #22
 8002926:	6003      	str	r3, [r0, #0]
 8002928:	2001      	movs	r0, #1
 800292a:	e7e7      	b.n	80028fc <_raise_r+0x12>
 800292c:	2400      	movs	r4, #0
 800292e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002932:	4628      	mov	r0, r5
 8002934:	4798      	blx	r3
 8002936:	2000      	movs	r0, #0
 8002938:	e7e0      	b.n	80028fc <_raise_r+0x12>
	...

0800293c <raise>:
 800293c:	4b02      	ldr	r3, [pc, #8]	; (8002948 <raise+0xc>)
 800293e:	4601      	mov	r1, r0
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	f7ff bfd2 	b.w	80028ea <_raise_r>
 8002946:	bf00      	nop
 8002948:	20000078 	.word	0x20000078

0800294c <_kill_r>:
 800294c:	b538      	push	{r3, r4, r5, lr}
 800294e:	4d07      	ldr	r5, [pc, #28]	; (800296c <_kill_r+0x20>)
 8002950:	2300      	movs	r3, #0
 8002952:	4604      	mov	r4, r0
 8002954:	4608      	mov	r0, r1
 8002956:	4611      	mov	r1, r2
 8002958:	602b      	str	r3, [r5, #0]
 800295a:	f7ff ff7b 	bl	8002854 <_kill>
 800295e:	1c43      	adds	r3, r0, #1
 8002960:	d102      	bne.n	8002968 <_kill_r+0x1c>
 8002962:	682b      	ldr	r3, [r5, #0]
 8002964:	b103      	cbz	r3, 8002968 <_kill_r+0x1c>
 8002966:	6023      	str	r3, [r4, #0]
 8002968:	bd38      	pop	{r3, r4, r5, pc}
 800296a:	bf00      	nop
 800296c:	200001d4 	.word	0x200001d4

08002970 <_getpid_r>:
 8002970:	f7ff bf68 	b.w	8002844 <_getpid>

08002974 <memcpy>:
 8002974:	440a      	add	r2, r1
 8002976:	4291      	cmp	r1, r2
 8002978:	f100 33ff 	add.w	r3, r0, #4294967295
 800297c:	d100      	bne.n	8002980 <memcpy+0xc>
 800297e:	4770      	bx	lr
 8002980:	b510      	push	{r4, lr}
 8002982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800298a:	4291      	cmp	r1, r2
 800298c:	d1f9      	bne.n	8002982 <memcpy+0xe>
 800298e:	bd10      	pop	{r4, pc}

08002990 <_init>:
 8002990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002992:	bf00      	nop
 8002994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002996:	bc08      	pop	{r3}
 8002998:	469e      	mov	lr, r3
 800299a:	4770      	bx	lr

0800299c <_fini>:
 800299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299e:	bf00      	nop
 80029a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a2:	bc08      	pop	{r3}
 80029a4:	469e      	mov	lr, r3
 80029a6:	4770      	bx	lr
